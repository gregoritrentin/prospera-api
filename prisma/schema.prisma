generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CalculationMode {
  NONE
  PERCENT
  VALUE
}

enum SplitType {
  PERCENT
  VALUE
}

enum YesNo {
  YES
  NO
}

enum PaymentType {
  PIX_KEY
  PIX_BANK_DETAILS
}

enum TransactionType {
  BOLETO
  PIX
  CARD
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  BOLETO
  PIX
}

enum MovementType {
  CREDIT
  DEBIT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum Status {
  ACTIVE
  INACTIVE
}

enum UserGender {
  MALE
  FEMAILE
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  CANCELED
}

enum SaleStatus {
  DRAFT
  CREDIT_ANALYSIS
  APPROVED
  CREDIT_DENIED
  WAITING_PREPAYMENT
  PAYMENT_EXPIRED
  IN_PROGRESS
  APPROVED_TO_INVOICE
  INVOICED
  CANCELED
  RETURNED
}

enum SubscriptionStatus {
  ACTIVE
  PASTDUE
  SUSPENDED
  CANCELED
}

model User {
  id              String    @id @default(uuid())
  name            String
  email           String    @unique
  cpf             String?   @unique
  phone           String?
  password        String
  birthDate       DateTime? @map("birth_date")
  status          String
  photoFileId     String?   @map("photo_file_id")
  defaultBusiness String?   @map("default_business")
  countryId       String?
  stateId         String?
  gender          String?
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")
  suspendedAt     DateTime? @map("suspended_at")

  business Business? @relation(fields: [defaultBusiness], references: [id])
  file     File?     @relation(fields: [photoFileId], references: [id])
  state    State?    @relation(fields: [stateId], references: [id])
  country  Country?  @relation(fields: [countryId], references: [id])

  userBusiness         UserBusiness[]
  userTerms            UserTerms[]
  ddeal                Deal[]
  sale                 Sale[]
  serviceOrder         ServiceOrder[]
  featureSuggestion    FeatureSuggestion[]
  featureVote          FeatureVote[]
  eventRegistration    EventRegistration[]
  campaignContribution CampaignContribution[]
  ticketAgent          Ticket[]               @relation("TicketAgent")
  ticketOwner          Ticket[]               @relation("TicketOwner")
  stockMovement        StockMovement[]
  loginLog             LoginLog[]

  @@map("users")
}

model LoginLog {
  id        String   @id @default(uuid())
  userId    String
  ipAddress String
  status    String
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map("login_logs")
}

model Terms {
  id        String    @id @default(uuid())
  title     String
  content   String
  language  String
  startAt   DateTime
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  userTerms UserTerms[]

  @@map("terms")
}

model Country {
  id   String @id @default(uuid())
  name String
  code String @unique

  state          State[]
  user           User[]
  business       Business[]
  person         Person[]
  businessOwners BusinessOwners[]

  @@map("countries")
}

model State {
  id        String @id @default(uuid())
  name      String
  code      String @unique
  countryId String @map("country_id")

  country        Country          @relation(fields: [countryId], references: [id])
  city           City[]
  user           User[]
  business       Business[]
  person         Person[]
  businessOwners BusinessOwners[]

  @@map("states")
}

model City {
  id      String @id @default(uuid())
  name    String
  stateId String @map("state_id")
  code    String @unique

  state          State            @relation(fields: [stateId], references: [id])
  business       Business[]
  person         Person[]
  businessOwners BusinessOwners[]

  @@map("cities")
}

model Ticket {
  id          String    @id @default(uuid())
  businessId  String    @map("business_id")
  ownerId     String    @map("owner_id")
  agentId     String?   @map("agent_id")
  subject     String
  description String
  status      String
  priority    String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  closedAt    DateTime? @map("closed_at")

  business Business @relation(fields: [businessId], references: [id])
  owner    User     @relation("TicketOwner", fields: [ownerId], references: [id])
  agent    User?    @relation("TicketAgent", fields: [agentId], references: [id])

  @@map("tickets")
}

model KnowledgeBaseCategory {
  id   String @id @default(uuid())
  name String

  knowledgeBases KnowledgeBase[]

  @@map("knowledge_base_categories")
}

model KnowledgeBase {
  id         String    @id @default(uuid())
  title      String
  summary    String
  content    String
  categoryId String    @map("category_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  knowledgeBaseCategory KnowledgeBaseCategory @relation(fields: [categoryId], references: [id])

  @@map("knowledge_base")
}

model FeatureSuggestion {
  id                  String    @id @default(uuid())
  businessId          String    @map("business_id")
  ownerId             String    @map("owner_id")
  title               String
  description         String
  status              String
  votes               Int       @default(0)
  crowdfundingGoal    Float?    @default(0.0) @map("crowdfunding_goal")
  currentCrowdfunding Float?    @default(0.0) @map("current_crowdfunding")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime? @updatedAt @map("updated_at")

  business    Business      @relation(fields: [businessId], references: [id])
  owner       User          @relation(fields: [ownerId], references: [id])
  featureVote FeatureVote[]

  @@map("feature_suggestions")
}

model FeatureVote {
  id                  String   @id @default(uuid())
  userId              String   @map("user_id")
  featureSuggestionId String   @map("feature_suggestion_id")
  createdAt           DateTime @default(now()) @map("created_at")

  user              User              @relation(fields: [userId], references: [id])
  featureSuggestion FeatureSuggestion @relation(fields: [featureSuggestionId], references: [id])

  @@unique([userId, featureSuggestionId], name: "userFeatureVoteIdentifier")
  @@map("feature_votes")
}

model UserTerms {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  termId    String    @map("term_id")
  ipAddress String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  term Terms @relation(fields: [termId], references: [id])
  user User  @relation(fields: [userId], references: [id])

  @@unique([userId, termId], name: "userTermIdentifier")
  @@map("user_terms")
}

model UserBusiness {
  id         String    @id @default(uuid())
  businessId String    @map("business_id")
  userId     String    @map("user_id")
  role       String
  status     String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([businessId, userId], name: "userBusinessIdentifier")
  @@map("user_business")
}

model Business {
  id                       String    @id @default(uuid())
  marketplaceId            String    @map("marketplace_id")
  name                     String
  email                    String
  phone                    String
  document                 String    @unique
  ie                       String?
  im                       String?
  addressLine1             String    @map("address_line1")
  addressLine2             String    @map("address_line2")
  addressLine3             String?   @map("address_line3")
  neighborhood             String
  postalCode               String    @map("postal_code")
  countryCode              String    @map("country_code")
  stateCode                String    @map("state_code")
  cityCode                 String    @map("city_code")
  businessType             String    @map("business_type")
  businessSize             String    @map("business_syze")
  foundingDate             DateTime  @default(now()) @map("founding_date")
  logoFileId               String?   @unique @map("logo_file_id")
  digitalCertificateFileId String?   @unique @map("digital_certificate_file_id")
  status                   String
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime? @updatedAt @map("updated_at")

  marketplace            Marketplaces @relation(fields: [marketplaceId], references: [id])
  logoFile               File?        @relation("LogoFile", fields: [logoFileId], references: [id])
  digitalCertificateFile File?        @relation("DigitalCertificateFile", fields: [digitalCertificateFileId], references: [id])
  country                Country      @relation(fields: [countryCode], references: [code])
  state                  State        @relation(fields: [stateCode], references: [code])
  city                   City         @relation(fields: [cityCode], references: [code])

  person               Person[]
  userBusiness         UserBusiness[]
  businessApps         BusinessApps[]
  businessOwners       BusinessOwners[]
  businessBankAccounts BusinessBankAccounts[]
  items                Item[]
  itemGroup            ItemGroup[]
  itemTaxation         ItemTaxation[]
  user                 User[]
  emailMessages        Email[]
  file                 File[]
  businessPlan         BusinessPlan[]
  account              Account[]
  subscription         Subscription[]
  event                Event[]
  deal                 Deal[]
  sale                 Sale[]
  priceList            PriceList[]
  invoice              Invoice[]
  receivable           Receivable[]
  serviceOrder         ServiceOrder[]
  ticket               Ticket[]
  featureSuggestion    FeatureSuggestion[]
  invoiceSplit         InvoiceSplit[]
  transactionSplit     TransactionSplit[]
  subscriptionSplit    SubscriptionSplit[]
  webhookEvent         WebhookEvent[]
  campaign             Campaign[]
  reservation          Reservation[]
  purchase             Purchase[]
  stockMovement        StockMovement[]
  inventory            Inventory[]
  cashFlow             CashFlow[]
  payment              Payment[]
  whatsApp             WhatsApp[]
  transaction          Transaction[]
  salesChannel         SalesChannel[]
  pipeline             Pipeline[]

  @@map("business")
}

model File {
  id         String    @id @default(uuid())
  businessId String    @map("business_id")
  title      String
  url        String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])

  user                       User[]
  invoiceAttachment          InvoiceAttachment[]
  logoBusiness               Business?           @relation("LogoFile")
  digitalCertificateBusiness Business?           @relation("DigitalCertificateFile")
  eventRegistration          EventRegistration[]
  campaign                   Campaign[]
  transaction                Transaction[]

  @@map("files")
}

model BusinessOwners {
  id           String    @id @default(uuid())
  businessId   String    @map("business_id")
  name         String
  email        String
  phone        String
  document     String
  addressLine1 String    @map("address_line1")
  addressLine2 String    @map("address_line2")
  addressLine3 String?   @map("address_line3")
  neighborhood String
  postalCode   String    @map("postal_code")
  countryCode  String    @map("country_code")
  stateCode    String    @map("state_code")
  cityCode     String    @map("city_code")
  birthDate    DateTime  @default(now()) @map("birth_date")
  ownerType    String    @map("owner_type")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  status       String

  business Business @relation(fields: [businessId], references: [id])
  country  Country  @relation(fields: [countryCode], references: [code])
  state    State    @relation(fields: [stateCode], references: [code])
  city     City     @relation(fields: [cityCode], references: [code])

  @@map("business_owners")
}

model BusinessBankAccounts {
  id         String    @id @default(uuid())
  businessId String    @map("business_id")
  bankCode   String
  branch     String
  account    String
  status     String
  type       String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  Bank     Bank     @relation(fields: [bankCode], references: [id])

  @@map("business_bank_accounts")
}

model Bank {
  id   String @id @default(uuid())
  name String
  code String @unique

  businessBankAccounts BusinessBankAccounts[]

  @@map("banks")
}

model Plan {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Float
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  businessPlan BusinessPlan[]

  @@map("plans")
}

model BusinessPlan {
  id         String    @id @default(uuid())
  businessId String    @map("business_id")
  planId     String    @map("plan_id")
  price      Float
  status     String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  plan     Plan     @relation(fields: [planId], references: [id])

  @@unique([businessId, planId, status], name: "businessPlanIdentifier")
  @@map("business_plans")
}

model App {
  id          String    @id @default(uuid())
  name        String
  description String
  price       Float
  quantity    Float
  type        String
  status      String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  businessApps BusinessApps[]

  @@map("apps")
}

model BusinessApps {
  id         String    @id @default(uuid())
  businessId String    @map("business_id")
  appId      String    @map("app_id")
  price      Float
  quantity   Int
  status     String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  apps     App      @relation(fields: [appId], references: [id])

  @@map("business_apps")
}

model Marketplaces {
  id        String    @id @default(uuid())
  name      String    @unique
  document  String    @unique
  status    String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  business Business[]

  @@map("marketplaces")
}

model Person {
  id           String    @id @default(uuid())
  businessId   String    @map("business_id")
  name         String
  email        String
  phone        String
  document     String
  ie           String?
  addressLine1 String    @map("address_line1")
  addressLine2 String    @map("address_line2")
  addressLine3 String?   @map("address_line3")
  neighborhood String
  postalCode   String    @map("postal_code")
  countryCode  String    @map("country_code")
  stateCode    String    @map("state_code")
  cityCode     String    @map("city_code")
  notes        String?
  status       String
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  country  Country  @relation(fields: [countryCode], references: [code])
  state    State    @relation(fields: [stateCode], references: [code])
  city     City     @relation(fields: [cityCode], references: [code])

  deal                 Deal[]
  invoice              Invoice[]
  eventRegistration    EventRegistration[]
  campaignContribution CampaignContribution[]
  reservation          Reservation[]
  salesAsCustomer      Sale[]                 @relation("Customer")
  salesAsPerson        Sale[]                 @relation("SalesPerson")
  customerOrders       ServiceOrder[]         @relation("Customer")
  technicianOrders     ServiceOrder[]         @relation("Technician")
  purchase             Purchase[]
  cashFlow             CashFlow[]
  payment              Payment[]
  transaction          Transaction[]
  subscription         Subscription[]

  @@unique([businessId, document], name: "documentIdentifier")
  @@map("persons")
}

model Item {
  id          String    @id @default(uuid())
  businessId  String    @map("business_id")
  itemType    String    @map("item_type")
  idAux       String    @map("id_aux")
  description String
  price       Float
  unit        String
  status      String
  groupId     String?   @map("group_id")
  taxationId  String?   @map("taxation_id")
  ncm         String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  business     Business      @relation(fields: [businessId], references: [id])
  itemGroup    ItemGroup?    @relation(fields: [groupId], references: [id])
  itemTaxation ItemTaxation? @relation(fields: [taxationId], references: [id])

  invoiceItem      InvoiceItem[]
  subscriptionItem SubscriptionItem[]
  dealItem         DealItem[]
  saleItem         SaleItem[]
  purchaseItem     PurchaseItem[]
  stockMovements   StockMovement[]

  @@unique([businessId, idAux], name: "idAuxIdentifier")
  @@map("items")
}

model ItemGroup {
  id         String    @id @default(uuid())
  businessId String    @map("business_id")
  group      String
  status     String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])

  item Item[]

  @@map("item_group")
}

model ItemTaxation {
  id         String    @id @default(uuid())
  businessId String    @map("business_id")
  taxation   String
  status     String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])

  item Item[]

  @@map("item_taxation")
}

model PriceList {
  id         String     @id @default(uuid())
  businessId String
  priceList  String     @map("price_list")
  status     String
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime?  @updatedAt @map("updated_at")
  DealItem   DealItem[]

  business Business @relation(fields: [businessId], references: [id])

  @@map("price_list")
}

model Email {
  id         String    @id @default(uuid())
  businessId String?   @map("business_id")
  to         String
  subject    String
  body       String
  status     String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  business Business? @relation(fields: [businessId], references: [id])

  @@map("emails")
}

model WhatsApp {
  id         String    @id @default(uuid())
  businessId String    @map("business_id")
  to         String
  content    String
  status     String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])

  @@map("whatsapps")
}

model Invoice {
  id String @id @default(uuid())

  businessId       String          @map("business_id")
  personId         String          @map("person_id")
  description      String?
  notes            String?
  paymentLink      String          @map("payment_link")
  status           InvoiceStatus
  //datas
  issueDate        DateTime        @map("issue_date") //data de emissão 
  dueDate          DateTime        @map("due_date") //data de vencimento
  paymentDate      DateTime        @map("paymend_date") //data do pgto
  paymentLimitDate DateTime?       @map("payment_limit_date") //data limite de pgto
  //valor
  grossAmount      Float           @map("gross_amount")
  discountAmount   Float           @map("discount_amount") //valor do desconto
  amount           Float // valor total
  paymentAmount    Float           @map("payment_amount") //valor do pgto
  //protest/protesto
  protestMode      YesNo
  protestDays      Int             @map("protest_days") //dias para protesto
  //late/multa
  lateMode         CalculationMode
  lateValue        Float           @map("late_value") //valor da multa
  //interest/juros
  interestMode     CalculationMode
  interestDays     Int             @map("interest_days") //dias para juros
  interestValue    Float           @map("interest_value") //valor dos juros
  //discount/desconto
  discountMode     CalculationMode
  discountDays     Int             @map("discount_days") //dias para desconto
  discountValue    Float           @map("discount_value") //valor do desconto

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  person   Person   @relation(fields: [personId], references: [id])

  invoiceItem        InvoiceItem[]
  invoiceEvent       InvoiceEvent[]
  invoiceAttachment  InvoiceAttachment[]
  invoiceSplit       InvoiceSplit[]
  invoiceTransaction InvoiceTransaction[]
  InvoicePayment     InvoicePayment[]

  @@map("invoices")
}

model InvoiceItem {
  id              String @id @default(uuid())
  invoiceId       String @map("invoice_id")
  itemId          String @map("item_id")
  itemDescription String @map("item_description")
  quantity        Float
  unitPrice       Float  @map("unit_price")
  discount        Float
  totalPrice      Float  @map("total_price")

  invoice Invoice @relation(fields: [invoiceId], references: [id])
  item    Item    @relation(fields: [itemId], references: [id])

  @@map("invoice_items")
}

model InvoiceTransaction {
  id            String @id @default(uuid())
  invoiceId     String @map("invoice_id")
  transactionId String @map("transaction_id")

  invoice     Invoice     @relation(fields: [invoiceId], references: [id])
  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@map("invoice_transactions")
}

model InvoicePayment {
  id            String        @id @default(uuid())
  invoiceId     String
  dueDate       DateTime      @map("due_date")
  ammount       Float
  paymentMethod PaymentMethod @map("payment_method")

  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("invoice_payments")
}

model InvoiceSplit {
  id          String          @id @default(uuid())
  invoiceId   String          @map("invoice_id")
  recipientId String          @map("recipient_id")
  splitType   CalculationMode @map("split_type")
  amount      Float
  feeAmount   Float           @map("fee_amount")

  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  recipient Business @relation(fields: [recipientId], references: [id])

  @@map("invoice_splits")
}

model InvoiceEvent {
  id        String   @id @default(uuid())
  invoiceId String   @map("invoice_id")
  event     String
  createdAt DateTime @default(now()) @map("created_at")

  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("invoice_events")
}

model InvoiceAttachment {
  id        String   @id @default(uuid())
  invoiceId String   @map("invoice_id")
  fileId    String   @map("file_id")
  createdAt DateTime @default(now()) @map("created_at")

  file    File    @relation(fields: [fileId], references: [id])
  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("invoice_attachments")
}

model Transaction {
  id               String          @id @default(uuid())
  businessId       String          @map("business_id")
  personId         String?         @map("person_id")
  description      String?
  status           String
  type             TransactionType
  //datas
  dueDate          DateTime?       @map("due_date")
  paymentDate      DateTime?       @map("paymend_date")
  paymentLimitDate DateTime?       @map("payment_limit_date")
  //valores
  amount           Float
  feeAmount        Float           @map("fee_amount")
  paymentAmount    Float?          @map("payment_amount")
  //boleto
  ourNumber        String?         @map("our_number")
  digitableLine    String?         @map("digitable_line")
  barcode          String?
  //pix
  pixQrCode        String?         @map("pix_qr_code")
  pixId            String?         @map("pix_id")
  fileId           String?         @map("file_id")
  //outros
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime?       @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  person   Person?  @relation(fields: [personId], references: [id])
  file     File?    @relation(fields: [fileId], references: [id])

  invoiceTransaction InvoiceTransaction[]
  transactionSplit   TransactionSplit[]
  receivable         Receivable[]

  @@map("transactions")
}

model TransactionSplit {
  id            String          @id @default(uuid())
  transactionId String          @unique @map("transaction_id")
  recipientId   String          @map("recipient_id")
  splitType     CalculationMode @map("split_type")
  amount        Float
  feeAmount     Float           @map("fee_amount")

  transaction Transaction @relation(fields: [transactionId], references: [id])
  recipient   Business    @relation(fields: [recipientId], references: [id])

  @@map("transaction_splits")
}

model Receivable {
  id            String    @id @default(uuid())
  businessId    String    @map("business_id")
  transactionId String    @map("transaction_id")
  dueDate       DateTime  @map("due_date")
  amount        Float
  status        String
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  business    Business    @relation(fields: [businessId], references: [id])
  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@map("receivables")
}

model Payment {
  id                     String      @id @default(uuid())
  businessId             String      @map("business_id")
  personId               String?     @map("person_id")
  paymentId              String?     @map("payment_id")
  paymentType            PaymentType @map("payment_type")
  description            String?
  status                 String
  amount                 Float
  feeAmount              Float       @map("fee_amount")
  paymentDate            DateTime    @map("paymend_date")
  pixMessage             String?     @map("pix_message")
  pixKey                 String?     @map("pix_key")
  beneficiaryIspb        String?
  beneficiaryBranch      String?
  beneficiaryAccount     String?
  beneficiaryAccountType String?
  beneficiaryName        String?
  beneficiaryDocument    String?
  createdAt              DateTime    @default(now()) @map("created_at")
  updatedAt              DateTime?   @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  person   Person?  @relation(fields: [personId], references: [id])

  @@index([paymentId])
  @@index([status])
  @@index([paymentType])
  @@map("payments")
}

model Account {
  id         String    @id @default(uuid())
  businessId String    @map("business_id")
  number     String
  status     String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])

  accountMovement     AccountMovement[]
  transferFromAccount Transfer[]        @relation("TransferFromAccount")
  transferToAccount   Transfer[]        @relation("TransferToAccount")

  @@map("accounts")
}

model AccountMovement {
  id          String       @id @default(uuid())
  accountId   String       @map("account_id")
  type        MovementType
  amount      Float
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?    @updatedAt @map("updated_at")

  account Account @relation(fields: [accountId], references: [id])

  transferFrom Transfer? @relation("TransferFromAccountMovement")
  transferTo   Transfer? @relation("TransferToAccountMovement")

  @@map("account_movement")
}

model Transfer {
  id String @id @default(uuid())

  fromAccountId String @map("from_account_id")
  toAccountId   String @map("to_account_id")

  fromAccountMovementId String @unique @map("from_account_movement_id")
  toAccountMovementId   String @unique @map("to_account_movement_id")

  amount    Float
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  fromAccount Account @relation("TransferFromAccount", fields: [fromAccountId], references: [id])
  toAccount   Account @relation("TransferToAccount", fields: [toAccountId], references: [id])

  fromAccountMovement AccountMovement @relation("TransferFromAccountMovement", fields: [fromAccountMovementId], references: [id])
  toAccountMovement   AccountMovement @relation("TransferToAccountMovement", fields: [toAccountMovementId], references: [id])

  @@unique([fromAccountMovementId, toAccountMovementId])
  @@map("transfers")
}

model CashFlow {
  id              String   @id @default(uuid())
  businessId      String   @map("business_id")
  personId        String?  @map("person_id")
  description     String
  date            DateTime
  amount          Float
  type            String //IN, OUT
  status          String
  chartOfAccounts String?  @map("chart_of_accounts")
  costCenter      String?
  document        String?
  notes           String?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  person   Person?  @relation(fields: [personId], references: [id])

  @@map("cash_flows")
}

model Subscription {
  id            String             @id @default(uuid())
  businessId    String             @map("business_id")
  personId      String             @map("person_id")
  price         Float
  notes         String?
  paymentMethod String             @map("payment_method")
  interval      String
  status        SubscriptionStatus

  nextBillingDate    DateTime  @map("next_billing_date")
  nextAdjustmentDate DateTime? @map("next_adjustment_date")

  cancellationReason        String?   @map("cancellation_reason")
  cancellationDate          DateTime? @map("cancellation_date")
  cancellationScheduledDate DateTime? @map("cancellation_scheduled_date")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  person   Person   @relation(fields: [personId], references: [id])

  subscriptionItem  SubscriptionItem[]
  subscriptionNFSe  SubscriptionNFSe[]
  subscriptionSplit SubscriptionSplit[]

  @@map("subscriptions")
}

model SubscriptionItem {
  id              String    @id @default(uuid())
  subscriptionId  String    @map("subscription_id")
  itemId          String    @map("item_id")
  itemDescription String    @map("item_description")
  quantity        Float
  unitPrice       Float     @map("unit_price")
  totalPrice      Float     @map("total_price")
  status          String
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")

  subscription Subscription @relation(fields: [subscriptionId], references: [id])
  item         Item         @relation(fields: [itemId], references: [id])

  @@map("subscription_items")
}

model SubscriptionSplit {
  id             String    @id @default(uuid())
  subscriptionId String    @map("subscription_id")
  recipientId    String    @map("recipient_id")
  splitType      SplitType @map("split_type")
  amount         Float
  feeAmount      Float     @map("fee_amount")

  subscription Subscription @relation(fields: [subscriptionId], references: [id])
  recipient    Business     @relation(fields: [recipientId], references: [id])

  @@map("subscription_splits")
}

model SubscriptionNFSe {
  id             String @id @default(uuid())
  subscriptionId String @map("subscription_id")

  serviceCode   String  @map("service_code")
  issRetention  Boolean @map("retention_iss")
  inssRetention Boolean @map("retention_inss")
  inssRate      Float?  @map("inss_rate")

  incidendeState String @map("incidende_state")
  indicendeCity  String @map("incidende_city")

  retentionState String @map("retention_state")
  retentionCity  String @map("retention_city")

  status String

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  subscription Subscription @relation(fields: [subscriptionId], references: [id])

  @@map("subscription_nfse")
}

model WebhookEvent {
  id          String    @id @default(uuid())
  businessId  String?   @map("business_id")
  eventType   String?   @map("event_type")
  payload     Json
  status      String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  processedAt DateTime? @map("processed_at")

  business Business? @relation(fields: [businessId], references: [id])

  @@map("webhook_events")
}

model Sale {
  id               String    @id @default(uuid())
  businessId       String    @map("business_id")
  customerId       String?   @map("customer_id")
  ownerId          String    @map("owner_id")
  salesPersonId    String    @map("sales_person_id")
  channelId        String?   @map("channel_id")
  issueDate        DateTime  @map("issue_date") //data de emissão 
  status           String
  notes            String?
  servicesAmount   Float     @default(0.0) @map("services_amount") // valor total dos serviços
  productAmount    Float     @default(0.0) @map("product_amount") // valor total dos produtos
  grossAmount      Float     @default(0.0) @map("gross_amount") //valor bruto
  discountAmount   Float     @default(0.0) @map("discount_amount") //valor do desconto
  amount           Float     @default(0.0) // valor total
  commissionAmount Float     @default(0.0) @map("commission_amount") //valor da comissão
  shippingAmount   Float     @default(0.0) @map("shipping_amount") //valor do frete
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime? @updatedAt @map("updated_at")

  business     Business      @relation(fields: [businessId], references: [id])
  owner        User          @relation(fields: [ownerId], references: [id])
  salesChannel SalesChannel? @relation(fields: [channelId], references: [id])
  salesPerson  Person        @relation("SalesPerson", fields: [salesPersonId], references: [id])
  customer     Person?       @relation("Customer", fields: [customerId], references: [id])

  saleItem   SaleItem[]
  saleReturn SaleReturn[]

  @@map("sales")
}

model SaleItem {
  id               String @id @default(uuid())
  saleId           String @map("sale_id")
  itemId           String @map("item_id")
  itemDescription  String @map("item_description")
  quantity         Float
  unitPrice        Float  @map("unit_price") //valor unitário
  discountAmount   Float  @map("discount_amount") //valor do desconto
  commissionAmount Float  @map("commission_amount") //valor da comissão
  totalPrice       Float  @map("total_price")

  item           Item             @relation(fields: [itemId], references: [id])
  sale           Sale             @relation(fields: [saleId], references: [id])
  saleReturnItem SaleReturnItem[]

  @@map("sale_items")
}

model SalesChannel {
  id         String    @id @default(uuid())
  businessId String    @map("business_id")
  name       String
  status     String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  sale     Sale[]

  @@map("sales_channels")
}

model SaleReturn {
  id         String    @id @default(uuid())
  saleId     String    @map("sale_id")
  returnDate DateTime  @map("return_date")
  reason     String
  notes      String?
  status     String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  sale Sale @relation(fields: [saleId], references: [id])

  returnItem SaleReturnItem[]

  @@map("sale_returns")
}

model SaleReturnItem {
  id         String    @id @default(uuid())
  returnId   String    @map("return_id")
  saleItemId String    @map("sale_item_id")
  quantity   Float
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  saleReturn     SaleReturn    @relation(fields: [returnId], references: [id])
  saleItem       SaleItem      @relation(fields: [saleItemId], references: [id])
  purchaseItem   PurchaseItem? @relation(fields: [purchaseItemId], references: [id])
  purchaseItemId String?

  @@map("sale_return_items")
}

model Purchase {
  id               String    @id @default(uuid())
  businessId       String
  supplierId       String
  documentDate     DateTime  @map("document_date") // data do documento
  documentNumber   String    @map("document_number") // número do documento
  accessKey        String    @map("access_key") //
  servicesAmount   Float     @default(0.0) @map("services_amount") // valor total dos serviços
  productAmount    Float     @default(0.0) @map("product_amount") // valor total dos produtos
  grossAmount      Float     @default(0.0) @map("gross_amount") //valor bruto
  discountAmount   Float     @default(0.0) @map("discount_amount") //valor do desconto
  commissionAmount Float     @default(0.0) @map("commission_amount") //valor da comissão
  shippingAmount   Float     @default(0.0) @map("shipping_amount") //valor do frete
  amount           Float     @default(0.0) // valor total
  status           String
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  supplier Person   @relation(fields: [supplierId], references: [id])

  purchaseItem    PurchaseItem[]
  purchasePayment PurchasePayment[]

  @@map("purchases")
}

model PurchaseItem {
  id              String    @id @default(uuid())
  purchaseId      String    @map("purchase_id")
  itemId          String    @map("item_id")
  itemDescription String    @map("item_description")
  quantity        Float
  unitPrice       Float     @map("unit_price") //valor unitário
  totalPrice      Float     @map("total_price")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")

  item     Item     @relation(fields: [itemId], references: [id])
  purchase Purchase @relation(fields: [purchaseId], references: [id])

  saleReturnItem SaleReturnItem[]

  @@map("purchase_items")
}

model PurchasePayment {
  id            String    @id @default(uuid())
  purchaseId    String    @map("purchase_id")
  paymentDate   DateTime  @map("payment_date") // data do pagamento
  amount        Float     @map("amount") // valor do pagamento
  paymentMethod String    @map("payment_method") // método de pagamento
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  purchase Purchase @relation(fields: [purchaseId], references: [id])

  @@map("purchase_payments")
}

model StockMovement {
  id          String    @id @default(uuid())
  businessId  String    @map("business_id")
  userId      String    @map("user_id")
  itemId      String    @map("item_id")
  description String
  quantity    Float
  type        String //IN, OUT, INVENTORY
  sourceType  String?   @map("source_type") //SALE, PURCHASE, TRANSFER, etc
  sourceId    String?   @map("source_id") // ID da origem (compra ou venda)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  item     Item     @relation(fields: [itemId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@map("stock_movements")
}

model Inventory {
  id          String    @id @default(uuid())
  businessId  String    @map("business_id")
  description String
  status      String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  business      Business        @relation(fields: [businessId], references: [id])
  inventoryItem InventoryItem[]

  @@map("inventories")
}

model InventoryItem {
  id              String    @id @default(uuid())
  inventoryId     String    @map("inventory_id")
  itemId          String    @map("item_id")
  quantity        Float
  unitCost        Float     @map("unit_cost")
  totalCost       Float     @map("total_cost")
  countedQuantity Float     @map("counted_quantity")
  systemQuantity  Float     @map("system_quantity")
  difference      Float     @map("difference")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")

  inventory Inventory @relation(fields: [inventoryId], references: [id])

  @@map("inventory_items")
}

model Deal {
  id                String    @id @default(uuid())
  businessId        String    @map("business_id")
  customerId        String?   @map("customer_id")
  ownerId           String    @map("owner_id")
  pipelineId        String    @map("pipeline_id")
  stageId           String    @map("stage_id")
  lostReasonId      String?   @map("lost_reason_id")
  title             String
  probability       Float?
  expectedCloseDate DateTime? @map("expected_close_date") //data de fechamento esperada
  notes             String?

  //valor
  grossAmount      Float  @default(0.0) @map("gross_amount")
  discountAmount   Float? @default(0.0) @map("discount_amount")
  amount           Float  @default(0.0)
  commissionAmount Float? @default(0.0) @map("commission_amount")
  shippingAmount   Float  @default(0.0) @map("shipping_amount")

  //datas
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  closedAt  DateTime? @map("closed_at") //data de fechamento

  lostReason LostReason? @relation(fields: [lostReasonId], references: [id])
  stage      Stage       @relation(fields: [stageId], references: [id])
  owner      User        @relation(fields: [ownerId], references: [id])
  business   Business    @relation(fields: [businessId], references: [id])
  person     Person?     @relation(fields: [customerId], references: [id])
  pipeline   Pipeline    @relation(fields: [pipelineId], references: [id])

  activity Activity[]
  dealItem DealItem[]

  @@map("crm_deals")
}

model DealItem {
  id               String  @id @default(uuid())
  dealId           String  @map("deal_id")
  itemId           String  @map("item_id")
  itemDescription  String  @map("item_description")
  priceListId      String? @map("price_list_id")
  quantity         Float
  unitPrice        Float   @map("unit_price")
  discountAmount   Float?  @map("discount_amount")
  commissionAmount Float?  @map("commission_amount")
  totalPrice       Float   @map("total_price")

  deal      Deal       @relation(fields: [dealId], references: [id])
  item      Item       @relation(fields: [itemId], references: [id])
  priceList PriceList? @relation(fields: [priceListId], references: [id])

  @@map("crm_deal_items")
}

model Pipeline {
  id         String @id @default(uuid())
  businessId String @map("business_id")
  name       String

  business Business @relation(fields: [businessId], references: [id])

  stage Stage[]
  deal  Deal[]

  @@map("crm_pipelines")
}

model Stage {
  id         String    @id @default(uuid())
  name       String
  pipelineId String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  pipeline Pipeline @relation(fields: [pipelineId], references: [id])
  deal     Deal[]

  @@map("crm_stages")
}

model LostReason {
  id   String @id @default(uuid())
  name String
  Deal Deal[]

  @@map("crm_lost_reasons")
}

model Activity {
  id      String   @id @default(uuid())
  dealId  String   @map("deal_id")
  title   String
  notes   String
  type    String
  status  String
  dueDate DateTime @map("due_date")
  dueTime String?  @map("due_time")

  deal Deal @relation(fields: [dealId], references: [id])

  @@map("crm_activities")
}

model ServiceOrder {
  id               String  @id @default(uuid())
  businessId       String  @map("business_id")
  customerId       String  @map("customer_id")
  ownerId          String  @map("owner_id")
  technicianId     String  @map("technician_id")
  requestedService String  @map("requested_service")
  performedService String? @map("performed_service")
  status           String
  notes            String?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  business   Business @relation(fields: [businessId], references: [id])
  owner      User     @relation(fields: [ownerId], references: [id])
  customer   Person   @relation("Customer", fields: [customerId], references: [id])
  technician Person   @relation("Technician", fields: [technicianId], references: [id])

  @@map("service_orders")
}

model Event {
  id          String    @id @default(uuid())
  businessId  String    @map("business_id")
  title       String
  description String
  status      String
  startAt     DateTime  @map("start_at")
  endAt       DateTime  @map("end_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  business          Business            @relation(fields: [businessId], references: [id])
  eventTier         EventTier[]
  eventRegistration EventRegistration[]

  @@map("events")
}

model EventTier {
  id        String    @id @default(uuid())
  eventId   String    @map("event_id")
  price     Float
  quantity  Int
  startAt   DateTime  @map("start_at")
  endAt     DateTime  @map("end_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  event             Event               @relation(fields: [eventId], references: [id])
  eventRegistration EventRegistration[]

  @@map("event_tiers")
}

model EventRegistration {
  id          String    @id @default(uuid())
  eventId     String    @map("event_id")
  eventTierId String    @map("event_tier_id")
  ownerId     String    @map("owner_id")
  personId    String    @map("person_id")
  imageFileId String    @map("image_file_id")
  amount      Float
  status      String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  event     Event     @relation(fields: [eventId], references: [id])
  eventTier EventTier @relation(fields: [eventTierId], references: [id])
  person    Person    @relation(fields: [personId], references: [id])
  owner     User      @relation(fields: [ownerId], references: [id])
  imageFile File?     @relation(fields: [imageFileId], references: [id])

  @@map("event_registrations")
}

model Campaign {
  id           String    @id @default(uuid())
  businessId   String    @map("business_id")
  title        String
  description  String
  categoryId   String    @map("category_id")
  goalAmount   Float     @map("goal_amount")
  raisedAmount Float     @map("raised_amount")
  imageFileId  String    @map("image_file_id")
  status       String
  startAt      DateTime  @map("start_at")
  endAt        DateTime? @map("end_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  business             Business               @relation(fields: [businessId], references: [id])
  category             CampaignCategory       @relation(fields: [categoryId], references: [id])
  imageFile            File?                  @relation(fields: [imageFileId], references: [id])
  campaignContribution CampaignContribution[]

  @@map("campaigns")
}

model CampaignCategory {
  id       String     @id @default(uuid())
  name     String
  Campaign Campaign[]

  @@map("campaign_categories")
}

model CampaignContribution {
  id         String    @id @default(uuid())
  campaignId String    @map("campaign_id")
  ownerId    String    @map("owner_id")
  personId   String    @map("person_id")
  amount     Float
  status     String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  campaign Campaign @relation(fields: [campaignId], references: [id])
  owner    User     @relation(fields: [ownerId], references: [id])
  person   Person   @relation(fields: [personId], references: [id])

  @@map("campaign_contributions")
}

model Reservation {
  id          String    @id @default(uuid())
  businessId  String    @map("business_id")
  personId    String    @map("person_id")
  title       String
  description String
  amount      Float
  status      String
  startAt     DateTime  @map("start_at")
  endAt       DateTime  @map("end_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  person   Person   @relation(fields: [personId], references: [id])

  reservationResource ReservationResource[]

  @@map("reservations")
}

model Resource {
  id        String    @id @default(uuid())
  name      String
  amount    Float
  status    String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  reservationResource ReservationResource[]

  @@map("resources")
}

model ReservationResource {
  id            String    @id @default(uuid())
  reservationId String    @map("reservation_id")
  resourceId    String    @map("resource_id")
  amount        Float
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  reservation Reservation @relation(fields: [reservationId], references: [id])
  resource    Resource    @relation(fields: [resourceId], references: [id])

  @@map("reservation_resources")
}
