generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CalculationMode {
  NONE
  PERCENT
  VALUE
}

enum SplitType {
  PERCENT
  VALUE
}

enum YesNo {
  YES
  NO
}

enum PaymentType {
  PIX_KEY
  PIX_BANK_DETAILS
}

enum TransactionType {
  BOLETO
  PIX
  CARD
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  BOLETO
  PIX
}

enum MovementType {
  CREDIT
  DEBIT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum Status {
  ACTIVE
  INACTIVE
}

enum UserGender {
  MALE
  FEMAILE
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  CANCELED
}

enum AppType {
  UNIT
  PERCENTAGE
}

enum SaleStatus {
  DRAFT
  CREDIT_ANALYSIS
  APPROVED
  CREDIT_DENIED
  WAITING_PREPAYMENT
  PAYMENT_EXPIRED
  IN_PROGRESS
  APPROVED_TO_INVOICE
  INVOICED
  CANCELED
  RETURNED
}

enum SubscriptionStatus {
  ACTIVE
  PASTDUE
  SUSPENDED
  CANCELED
}

enum NfseSubstituteReason {
  REGISTRATION_ERROR // ERRO DE CADASTRO - Informações incorretas sobre o cliente
  VALUE_ERROR // ERRO DE VALOR - Valores incorretos na nota fiscal
  SERVICE_ERROR // ERRO DE SERVIÇO - Serviço ou descrição inadequada
  OTHER // OUTROS - Situações específicas não previstas
}

enum NfseCancelReason {
  DUPLICATE_EMISSION // EMISSÃO DUPLICADA - Nota emitida mais de uma vez
  FILLING_ERROR // ERRO DE PREENCHIMENTO - Campos incorretos
  SERVICE_NOT_PROVIDED // SERVIÇO NÃO REALIZADO - Serviço não prestado
  FRAUD // FRAUDE - Identificação de irregularidades
  OTHER // OUTROS - Situações não previstas
}

enum RpsType {
  RPS
  NFCONJUGADA
  CUPOM
}

enum NfseEventType {
  ISSUANCE
  CANCELLATION
  QUERY
  REPLACEMENT
  AUTHORIZATION
  REJECTION
  PROCESSING
  BATCH_PROCESSING
  ERROR_CORRECTION
  STATUS_UPDATE
}

enum NfseEventStatus {
  SUCCESS
  ERROR
  WARNING
  PENDING
  TIMEOUT
  PARTIAL
}

enum AbrasfVersion {
  v100
  v200
  v201
  v202
  v203
  v204
}

enum IssRequirement {
  EXIGIVEL
  ISENTO
  IMUNE
  EXPORTACAO
  SUSPENSO_DECISAO_JUDICIAL
  SUSPENSO_PROCESSO_ADMIN
}

enum OperationType {
  TAXATION_IN_CITY
  TAXATION_OUT_CITY
  EXEMPTION
  IMMUNE
  SUSPENDED_JUDICIAL
  SUSPENDED_ADMINISTRATIVE
}

enum NfseStatus {
  AUTHORIZED // 1 - NFSe Autorizada/Emitida com sucesso
  CANCELED // 2 - NFSe Cancelada
  DRAFT // 3 - NFSe em elaboração (Não transmitida)
  PENDING // 4 - NFSe Pendente (Aguardando processamento)
  ERROR // 5 - NFSe com Erro de processamento
  REPLACED // 6 - NFSe Substituída
  PROCESSING // 7 - NFSe em Processamento
  REJECTED // 8 - NFSe Rejeitada
}

enum ServiceCode {
  // 1 – Serviços de informática e congêneres
  S01_01 // Análise e desenvolvimento de sistemas
  S01_02 // Programação
  S01_03 // Processamento, armazenamento ou hospedagem de dados, textos, imagens, vídeos, páginas eletrônicas, aplicativos e sistemas de informação, entre outros
  S01_04 // Elaboração de programas de computadores, inclusive de jogos eletrônicos
  S01_05 // Licenciamento ou cessão de direito de uso de programas de computação
  S01_06 // Assessoria e consultoria em informática
  S01_07 // Suporte técnico em informática, inclusive instalação, configuração e manutenção de programas de computação e bancos de dados
  S01_08 // Planejamento, confecção, manutenção e atualização de páginas eletrônicas
  S01_09 // Disponibilização, sem cessão definitiva, de conteúdos de áudio, vídeo, imagem e texto por meio da internet

  // 2 – Serviços de pesquisas e desenvolvimento de qualquer natureza
  S02_01 // Serviços de pesquisas e desenvolvimento de qualquer natureza

  // 3 – Serviços prestados mediante locação, cessão de direito de uso e congêneres
  S03_02 // Cessão de direito de uso de marcas e de sinais de propaganda
  S03_03 // Exploração de salões de festas, centro de convenções, escritórios virtuais, stands, quadras esportivas, estádios, ginásios, auditórios, casas de espetáculos, parques de diversões, canchas e congêneres
  S03_04 // Locação, sublocação, arrendamento, direito de passagem ou permissão de uso, compartilhado ou não, de ferrovia, rodovia, postes, cabos, dutos e condutos de qualquer natureza
  S03_05 // Cessão de andaimes, palcos, coberturas e outras estruturas de uso temporário

  // 4 – Serviços de saúde, assistência médica e congêneres
  S04_01 // Medicina e biomedicina
  S04_02 // Análises clínicas, patologia, eletricidade médica, radioterapia, quimioterapia, ultra-sonografia, ressonância magnética, radiologia, tomografia e congêneres
  S04_03 // Hospitais, clínicas, laboratórios, sanatórios, manicômios, casas de saúde, prontos-socorros, ambulatórios e congêneres
  S04_04 // Instrumentação cirúrgica
  S04_05 // Acupuntura
  S04_06 // Enfermagem, inclusive serviços auxiliares
  S04_07 // Serviços farmacêuticos
  S04_08 // Terapia ocupacional, fisioterapia e fonoaudiologia
  S04_09 // Terapias de qualquer espécie destinadas ao tratamento físico, orgânico e mental
  S04_10 // Nutrição
  S04_11 // Obstetrícia
  S04_12 // Odontologia
  S04_13 // Ortóptica
  S04_14 // Próteses sob encomenda
  S04_15 // Psicanálise
  S04_16 // Psicologia
  S04_17 // Casas de repouso e de recuperação, creches, asilos e congêneres
  S04_18 // Inseminação artificial, fertilização in vitro e congêneres
  S04_19 // Bancos de sangue, leite, pele, olhos, óvulos, sêmen e congêneres
  S04_20 // Coleta de sangue, leite, tecidos, sêmen, órgãos e materiais biológicos de qualquer espécie
  S04_21 // Unidade de atendimento, assistência ou tratamento móvel e congêneres
  S04_22 // Planos de medicina de grupo ou individual e convênios para prestação de assistência médica, hospitalar, odontológica e congêneres
  S04_23 // Outros planos de saúde que se cumpram através de serviços de terceiros contratados, credenciados, cooperados ou apenas pagos pelo operador do plano mediante indicação do beneficiário

  // 5 – Serviços de medicina e assistência veterinária e congêneres
  S05_01 // Medicina veterinária e zootecnia
  S05_02 // Hospitais, clínicas, ambulatórios, prontos-socorros e congêneres, na área veterinária
  S05_03 // Laboratórios de análise na área veterinária
  S05_04 // Inseminação artificial, fertilização in vitro e congêneres
  S05_05 // Bancos de sangue e de órgãos e congêneres
  S05_06 // Coleta de sangue, leite, tecidos, sêmen, órgãos e materiais biológicos de qualquer espécie
  S05_07 // Unidade de atendimento, assistência ou tratamento móvel e congêneres
  S05_08 // Guarda, tratamento, amestramento, embelezamento, alojamento e congêneres
  S05_09 // Planos de atendimento e assistência médico-veterinária

  // 6 – Serviços de cuidados pessoais, estética, atividades físicas e congêneres
  S06_01 // Barbearia, cabeleireiros, manicuros, pedicuros e congêneres
  S06_02 // Esteticistas, tratamento de pele, depilação e congêneres
  S06_03 // Banhos, duchas, sauna, massagens e congêneres
  S06_04 // Ginástica, dança, esportes, natação, artes marciais e demais atividades físicas
  S06_05 // Centros de emagrecimento, spa e congêneres
  S06_06 // Aplicação de tatuagens, piercings e congêneres

  // 7 – Serviços relativos a engenharia, arquitetura, geologia, urbanismo, construção civil, manutenção, limpeza, meio ambiente, saneamento e congêneres
  S07_01 // Engenharia, agronomia, agrimensura, arquitetura, geologia, urbanismo, paisagismo e congêneres
  S07_02 // Execução de obras de construção civil, hidráulica ou elétrica e de outras obras semelhantes
  S07_03 // Elaboração de planos diretores, estudos de viabilidade, estudos organizacionais e outros
  S07_04 // Demolição
  S07_05 // Reparação, conservação e reforma de edifícios, estradas, pontes, portos e congêneres
  S07_06 // Colocação e instalação de tapetes, carpetes, assoalhos, cortinas, revestimentos de parede, vidros, divisórias, placas de gesso e congêneres
  S07_07 // Recuperação, raspagem, polimento e lustração de pisos e congêneres
  S07_08 // Calafetação
  S07_09 // Varrição, coleta, remoção, incineração, tratamento, reciclagem, separação e destinação final de lixo, rejeitos e outros resíduos quaisquer
  S07_10 // Limpeza, manutenção e conservação de vias e logradouros públicos, imóveis, chaminés, piscinas, parques, jardins e congêneres
  S07_11 // Decoração e jardinagem, inclusive corte e poda de árvores
  S07_12 // Controle e tratamento de efluentes de qualquer natureza e de agentes físicos, químicos e biológicos
  S07_13 // Dedetização, desinfecção, desinsetização, imunização, higienização, desratização, pulverização e congêneres
  S07_14 // Florestamento, reflorestamento, semeadura, adubação, reparação de solo, plantio, silagem, colheita, corte e descascamento de árvores
  S07_15 // Escoramento, contenção de encostas e serviços congêneres
  S07_16 // Limpeza e dragagem de rios, portos, canais, baías, lagos, lagoas, represas, açudes e congêneres
  S07_17 // Acompanhamento e fiscalização da execução de obras de engenharia, arquitetura e urbanismo
  S07_18 // Aerofotogrametria (inclusive interpretação), cartografia, mapeamento, levantamentos topográficos, batimétricos, geográficos, geodésicos, geológicos, geofísicos e congêneres
  S07_19 // Pesquisa, perfuração, cimentação, mergulho, perfilagem, concretação, testemunhagem, pescaria, estimulação e outros serviços relacionados com a exploração e explotação de petróleo, gás natural e de outros recursos minerais
  S07_20 // Nucleação e bombardeamento de nuvens e congêneres

  // 8 – Serviços de educação, ensino, orientação pedagógica e educacional, instrução, treinamento e avaliação pessoal de qualquer grau ou natureza
  S08_01 // Ensino regular pré-escolar, fundamental, médio e superior
  S08_02 // Instrução, treinamento, orientação pedagógica e educacional, avaliação de conhecimentos de qualquer natureza

  // 9 – Serviços relativos a hospedagem, turismo, viagens e congêneres
  S09_01 // Hospedagem de qualquer natureza em hotéis, apart-service condominiais, flat, apart-hotéis, hotéis residência, residence-service, suite service, hotelaria marítima, motéis, pensões e congêneres
  S09_02 // Agenciamento, organização, promoção, intermediação e execução de programas de turismo, passeios, viagens, excursões, hospedagens e congêneres
  S09_03 // Guias de turismo

  // 10 – Serviços de intermediação e congêneres
  S10_01 // Agenciamento, corretagem ou intermediação de câmbio, de seguros, de cartões de crédito, de planos de saúde e de planos de previdência privada
  S10_02 // Agenciamento, corretagem ou intermediação de títulos em geral, valores mobiliários e contratos quaisquer
  S10_03 // Agenciamento, corretagem ou intermediação de direitos de propriedade industrial, artística ou literária
  S10_04 // Agenciamento, corretagem ou intermediação de contratos de arrendamento mercantil (leasing), de franquia (franchising) e de faturização (factoring)
  S10_05 // Agenciamento, corretagem ou intermediação de bens móveis ou imóveis, não abrangidos em outros itens ou subitens
  S10_06 // Agenciamento marítimo
  S10_07 // Agenciamento de notícias
  S10_08 // Agenciamento de publicidade e propaganda, inclusive o agenciamento de veiculação por quaisquer meios
  S10_09 // Representação de qualquer natureza, inclusive comercial
  S10_10 // Distribuição de bens de terceiros

  // 11 – Serviços de guarda, estacionamento, armazenamento, vigilância e congêneres
  S11_01 // Guarda e estacionamento de veículos terrestres automotores, de aeronaves e de embarcações
  S11_02 // Vigilância, segurança ou monitoramento de bens, pessoas e semoventes
  S11_03 // Escolta, inclusive de veículos e cargas
  S11_04 // Armazenamento, depósito, carga, descarga, arrumação e guarda de bens de qualquer espécie

  // 12 – Serviços de diversões, lazer, entretenimento e congêneres
  S12_01 // Espetáculos teatrais
  S12_02 // Exibições cinematográficas
  S12_03 // Espetáculos circenses
  S12_04 // Programas de auditório
  S12_05 // Parques de diversões, centros de lazer e congêneres
  S12_06 // Boates, taxi-dancing e congêneres
  S12_07 // Shows, ballet, danças, desfiles, bailes, óperas, concertos, recitais, festivais e congêneres
  S12_08 // Feiras, exposições, congressos e congêneres
  S12_09 // Bilhares, boliches e diversões eletrônicas ou não
  S12_10 // Corridas e competições de animais
  S12_11 // Competições esportivas ou de destreza física ou intelectual, com ou sem a participação do espectador
  S12_12 // Execução de música
  S12_13 // Produção, mediante ou sem encomenda prévia, de eventos, espetáculos, entrevistas, shows, ballet, danças, desfiles, bailes, teatros, óperas, concertos, recitais, festivais e congêneres
  S12_14 // Fornecimento de música para ambientes fechados ou não, mediante transmissão por qualquer processo
  S12_15 // Desfiles de blocos carnavalescos ou folclóricos, trios elétricos e congêneres
  S12_16 // Exibição de filmes, entrevistas, musicais, espetáculos, shows, concertos, desfiles, óperas, competições esportivas, de destreza intelectual ou congêneres
  S12_17 // Recreação e animação, inclusive em festas e eventos de qualquer natureza

  // 13 – Serviços relativos a fonografia, fotografia, cinematografia e reprografia
  S13_01 // Fonografia ou gravação de sons, inclusive trucagem, dublagem, mixagem e congêneres
  S13_02 // Fotografia e cinematografia, inclusive revelação, ampliação, cópia, reprodução, trucagem e congêneres
  S13_03 // Reprografia, microfilmagem e digitalização
  S13_04 // Composição gráfica, inclusive confecção de impressos gráficos, fotocomposição, clicheria, zincografia, litografia e fotolitografia

  // 14 – Serviços relativos a bens de terceiros
  S14_01 // Lubrificação, limpeza, lustração, revisão, carga e recarga, conserto, restauração, blindagem, manutenção e conservação de máquinas, veículos, aparelhos, equipamentos, motores, elevadores ou de qualquer objeto
  S14_02 // Assistência técnica
  S14_03 // Recondicionamento de motores
  S14_04 // Recauchutagem ou regeneração de pneus
  S14_05 // Restauração, recondicionamento, acondicionamento, pintura, beneficiamento, lavagem, secagem, tingimento, galvanoplastia, anodização, corte, recorte, plastificação, costura, acabamento, polimento e congêneres
  S14_06 // Instalação e montagem de aparelhos, máquinas e equipamentos, inclusive montagem industrial
  S14_07 // Colocação de molduras e congêneres
  S14_08 // Encadernação, gravação e douração de livros, revistas e congêneres
  S14_09 // Alfaiataria e costura
  S14_10 // Tinturaria e lavanderia
  S14_11 // Tapeçaria e reforma de estofamentos em geral
  S14_12 // Funilaria e lanternagem
  S14_13 // Carpintaria e serralheria

  // 15 – Serviços relacionados ao setor bancário ou financeiro
  S15_01 // Administração de fundos, de consórcio, de cartão de crédito ou débito e congêneres
  S15_02 // Abertura de contas, inclusive conta-corrente, conta de investimentos e aplicação e caderneta de poupança
  S15_03 // Locação e manutenção de cofres particulares, de terminais eletrônicos, de terminais de atendimento
  S15_04 // Fornecimento ou emissão de atestados em geral
  S15_05 // Cadastro, elaboração de ficha cadastral, renovação cadastral e congêneres
  S15_06 // Emissão, reemissão e fornecimento de avisos, comprovantes e documentos em geral
  S15_07 // Acesso, movimentação, atendimento e consulta a contas, por qualquer meio ou processo
  S15_08 // Emissão, reemissão, alteração, cessão, substituição, cancelamento e registro de contrato de crédito
  S15_09 // Arrendamento mercantil (leasing) de quaisquer bens
  S15_10 // Serviços relacionados a cobranças, recebimentos ou pagamentos em geral
  S15_11 // Devolução de títulos, protesto de títulos, sustação de protesto, manutenção de títulos
  S15_12 // Custódia em geral, inclusive de títulos e valores mobiliários
  S15_13 // Serviços relacionados a operações de câmbio
  S15_14 // Fornecimento, emissão, reemissão, renovação e manutenção de cartão magnético
  S15_15 // Compensação de cheques e títulos quaisquer
  S15_16 // Serviços relacionados a crédito imobiliário, avaliação e vistoria de imóvel
  S15_17 // Emissão, reemissão, alteração, transferência e renegociação de contrato
  S15_18 // Análise e avaliação de operações de crédito

  // 16 – Serviços de transporte de natureza municipal
  S16_01 // Serviços de transporte coletivo municipal rodoviário, metroviário, ferroviário e aquaviário de passageiros
  S16_02 // Outros serviços de transporte de natureza municipal

  // 17 – Serviços de apoio técnico, administrativo, jurídico, contábil, comercial e congêneres
  S17_01 // Assessoria ou consultoria de qualquer natureza
  S17_02 // Datilografia, digitação, estenografia, expediente, secretaria em geral
  S17_03 // Elaboração de programas de computadores
  S17_04 // Planejamento, coordenação, programação ou organização técnica
  S17_05 // Recrutamento, agenciamento, seleção e colocação de mão-de-obra
  S17_06 // Propaganda e publicidade, inclusive promoção de vendas
  S17_07 // Franquia (franchising)
  S17_08 // Perícias, laudos, exames técnicos e análises técnicas
  S17_09 // Planejamento, organização e administração de feiras, exposições, congressos e congêneres
  S17_10 // Organização de festas e recepções
  S17_11 // Administração em geral, inclusive de bens e negócios de terceiros
  S17_12 // Leilão e congêneres
  S17_13 // Advocacia
  S17_14 // Arbitragem de qualquer espécie
  S17_15 // Auditoria
  S17_16 // Análise de Organização e Métodos
  S17_17 // Atuária e cálculos técnicos de qualquer natureza
  S17_18 // Contabilidade, inclusive serviços técnicos e auxiliares
  S17_19 // Consultoria e assessoria econômica ou financeira
  S17_20 // Estatística
  S17_21 // Cobrança em geral
  S17_22 // Assessoria, análise, avaliação, atendimento, consulta, cadastro, seleção
  S17_23 // Apresentação de palestras, conferências, seminários e congêneres
  S17_24 // Inserção de textos, desenhos e outros materiais de propaganda e publicidade

  // 18 – Serviços de regulação de sinistros vinculados a contratos de seguros
  S18_01 // Serviços de regulação de sinistros vinculados a contratos de seguros

  // 19 – Serviços de distribuição e venda de bilhetes e demais produtos de loteria
  S19_01 // Serviços de distribuição e venda de bilhetes e demais produtos de loteria

  // 20 – Serviços portuários, aeroportuários, ferroportuários
  S20_01 // Serviços portuários, ferroportuários, utilização de porto, movimentação de passageiros
  S20_02 // Serviços aeroportuários, utilização de aeroporto, movimentação de passageiros
  S20_03 // Serviços de terminais rodoviários, ferroviários, metroviários, movimentação de passageiros

  // 21 – Serviços de registros públicos, cartorários e notariais
  S21_01 // Serviços de registros públicos, cartorários e notariais

  // 22 – Serviços de exploração de rodovia
  S22_01 // Serviços de exploração de rodovia

  // 23 – Serviços de programação e comunicação visual, desenho industrial e congêneres
  S23_01 // Serviços de programação e comunicação visual, desenho industrial e congêneres

  // 24 – Serviços de chaveiros, confecção de carimbos, placas, sinalização visual
  S24_01 // Serviços de chaveiros, confecção de carimbos, placas, sinalização visual

  // 25 – Serviços funerários
  S25_01 // Funerais, inclusive fornecimento de caixão, urna ou esquifes
  S25_02 // Cremação de corpos e partes de corpos cadavéricos
  S25_03 // Planos ou convênio funerários
  S25_04 // Manutenção e conservação de jazigos e cemitérios

  // 26 – Serviços de coleta, remessa ou entrega de correspondências
  S26_01 // Serviços de coleta, remessa ou entrega de correspondências

  // 27 – Serviços de assistência social
  S27_01 // Serviços de assistência social

  // 28 – Serviços de avaliação de bens e serviços de qualquer natureza
  S28_01 // Serviços de avaliação de bens e serviços de qualquer natureza

  // 29 – Serviços de biblioteconomia
  S29_01 // Serviços de biblioteconomia

  // 30 – Serviços de biologia, biotecnologia e química
  S30_01 // Serviços de biologia, biotecnologia e química

  // 31 – Serviços técnicos em edificações, eletrônica, eletrotécnica, mecânica, telecomunicações
  S31_01 // Serviços técnicos em edificações, eletrônica, eletrotécnica, mecânica, telecomunicações

  // 32 – Serviços de desenhos técnicos
  S32_01 // Serviços de desenhos técnicos

  // 33 – Serviços de desembaraço aduaneiro, comissários, despachantes
  S33_01 // Serviços de desembaraço aduaneiro, comissários, despachantes

  // 34 – Serviços de investigações particulares, detetives
  S34_01 // Serviços de investigações particulares, detetives

  // 35 – Serviços de reportagem, assessoria de imprensa, jornalismo e relações públicas
  S35_01 // Serviços de reportagem, assessoria de imprensa, jornalismo e relações públicas

  // 36 – Serviços de meteorologia
  S36_01 // Serviços de meteorologia

  // 37 – Serviços de artistas, atletas, modelos e manequins
  S37_01 // Serviços de artistas, atletas, modelos e manequins

  // 38 – Serviços de museologia
  S38_01 // Serviços de museologia

  // 39 – Serviços de ourivesaria e lapidação
  S39_01 // Serviços de ourivesaria e lapidação

  // 40 – Serviços relativos a obras de arte sob encomenda
  S40_01 // Obras de arte sob encomenda
}

enum CertificateSource {
  INTERNAL
  EXTERNAL
}

enum CertificateStatus {
  PENDING_VALIDATION
  ACTIVE
  INACTIVE
  EXPIRING
  EXPIRED
  INVALID
}

enum AnticipationReceivableStatus {
  PENDING // Aguardando análise
  IN_ANALYSIS // Em análise
  APPROVED // Aprovado para antecipação
  PARTIALLY_APPROVED // Aprovado com valor parcial
  REJECTED // Rejeitado
  COMPLETED // Antecipação concluída
  CANCELLED // Cancelado
}

enum AnticipationType {
  TOTAL // Antecipação de todos os recebíveis
  PARTIAL // Antecipação parcial de recebíveis
  SELECTED // Antecipação de recebíveis selecionados
}

enum ReceivableStatus {
  PENDING
  ANTICIPATED
  PAID
  CANCELLED
}

enum AnticipationStatus {
  PENDING
  ANALYSIS
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

model User {
  id              String    @id @default(uuid())
  name            String
  email           String    @unique
  cpf             String?   @unique
  phone           String
  password        String
  birthDate       DateTime? @map("birth_date")
  status          String
  photoFileId     String?   @map("photo_file_id")
  defaultBusiness String?   @map("default_business")
  countryId       String?
  stateId         String?
  gender          String?
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")
  suspendedAt     DateTime? @map("suspended_at")

  // Relacionamentos principais
  business Business? @relation(fields: [defaultBusiness], references: [id])
  file     File?     @relation(fields: [photoFileId], references: [id])
  state    State?    @relation(fields: [stateId], references: [id])
  country  Country?  @relation(fields: [countryId], references: [id])

  // Outros relacionamentos
  userBusiness            UserBusiness[]
  userTerms               UserTerms[]
  ddeal                   Deal[]
  sale                    Sale[]
  serviceOrder            ServiceOrder[]
  featureSuggestion       FeatureSuggestion[]
  featureVote             FeatureVote[]
  eventRegistration       EventRegistration[]
  campaignContribution    CampaignContribution[]
  ticketAgent             Ticket[]                  @relation("TicketAgent")
  ticketOwner             Ticket[]                  @relation("TicketOwner")
  stockMovement           StockMovement[]
  loginLog                LoginLog[]
  twoFactorAuthentication TwoFactorAuthentication[]
  AnticipationReceivable  AnticipationReceivable[]

  @@map("users")
}

model LoginLog {
  id        String   @id @default(uuid())
  userId    String
  ipAddress String
  status    String
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map("login_logs")
}

model Terms {
  id        String    @id @default(uuid())
  title     String
  content   String
  language  String
  startAt   DateTime
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  userTerms UserTerms[]

  @@map("terms")
}

model Country {
  id   String @id @default(uuid())
  name String
  code String @unique

  state          State[]
  user           User[]
  business       Business[]
  person         Person[]
  businessOwners BusinessOwners[]

  @@map("countries")
}

model State {
  id        String @id @default(uuid())
  name      String
  code      String @unique
  countryId String @map("country_id")

  country               Country                 @relation(fields: [countryId], references: [id])
  city                  City[]
  user                  User[]
  business              Business[]
  person                Person[]
  businessOwners        BusinessOwners[]
  NfseCityConfiguration NfseCityConfiguration[]
  nfseIncidence         Nfse[]                  @relation("IncidenceState")
  nfseService           Nfse[]                  @relation("ServiceState")

  @@map("states")
}

model City {
  id      String @id @default(uuid())
  name    String
  stateId String @map("state_id")
  code    String @unique

  state                 State                   @relation(fields: [stateId], references: [id])
  business              Business[]
  person                Person[]
  businessOwners        BusinessOwners[]
  NfseCityConfiguration NfseCityConfiguration[]
  nfseIncidence         Nfse[]                  @relation("IncidenceCity")
  nfseService           Nfse[]                  @relation("ServiceCity")

  @@map("cities")
}

model Ticket {
  id          String    @id @default(uuid())
  businessId  String    @map("business_id")
  ownerId     String    @map("owner_id")
  agentId     String?   @map("agent_id")
  subject     String
  description String
  status      String
  priority    String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  closedAt    DateTime? @map("closed_at")

  business Business @relation(fields: [businessId], references: [id])
  owner    User     @relation("TicketOwner", fields: [ownerId], references: [id])
  agent    User?    @relation("TicketAgent", fields: [agentId], references: [id])

  @@map("tickets")
}

model KnowledgeBaseCategory {
  id   String @id @default(uuid())
  name String

  knowledgeBases KnowledgeBase[]

  @@map("knowledge_base_categories")
}

model KnowledgeBase {
  id         String    @id @default(uuid())
  title      String
  summary    String
  content    String
  categoryId String    @map("category_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  knowledgeBaseCategory KnowledgeBaseCategory @relation(fields: [categoryId], references: [id])

  @@map("knowledge_base")
}

model FeatureSuggestion {
  id                  String    @id @default(uuid())
  businessId          String    @map("business_id")
  ownerId             String    @map("owner_id")
  title               String
  description         String
  status              String
  votes               Int       @default(0)
  crowdfundingGoal    Float?    @default(0.0) @map("crowdfunding_goal")
  currentCrowdfunding Float?    @default(0.0) @map("current_crowdfunding")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime? @updatedAt @map("updated_at")

  business    Business      @relation(fields: [businessId], references: [id])
  owner       User          @relation(fields: [ownerId], references: [id])
  featureVote FeatureVote[]

  @@map("feature_suggestions")
}

model FeatureVote {
  id                  String   @id @default(uuid())
  userId              String   @map("user_id")
  featureSuggestionId String   @map("feature_suggestion_id")
  createdAt           DateTime @default(now()) @map("created_at")

  user              User              @relation(fields: [userId], references: [id])
  featureSuggestion FeatureSuggestion @relation(fields: [featureSuggestionId], references: [id])

  @@unique([userId, featureSuggestionId], name: "userFeatureVoteIdentifier")
  @@map("feature_votes")
}

model UserTerms {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  termId    String    @map("term_id")
  ipAddress String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  term Terms @relation(fields: [termId], references: [id])
  user User  @relation(fields: [userId], references: [id])

  @@unique([userId, termId], name: "userTermIdentifier")
  @@map("user_terms")
}

model UserBusiness {
  id         String    @id @default(uuid())
  businessId String    @map("business_id")
  userId     String    @map("user_id")
  role       String
  status     String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([businessId, userId], name: "userBusinessIdentifier")
  @@map("user_business")
}

model Business {
  id                       String    @id @default(uuid())
  marketplaceId            String    @map("marketplace_id")
  name                     String
  email                    String
  phone                    String
  document                 String    @unique
  ie                       String? // Inscrição Estadual
  im                       String? // Inscrição Municipal
  addressLine1             String    @map("address_line1")
  addressLine2             String    @map("address_line2")
  addressLine3             String?   @map("address_line3")
  neighborhood             String
  postalCode               String    @map("postal_code")
  countryCode              String    @map("country_code")
  stateCode                String    @map("state_code")
  cityCode                 String    @map("city_code")
  businessType             String    @map("business_type")
  businessSize             String    @map("business_syze")
  foundingDate             DateTime  @default(now()) @map("founding_date")
  logoFileId               String?   @unique @map("logo_file_id")
  digitalCertificateFileId String?   @unique @map("digital_certificate_file_id")
  status                   String
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime? @updatedAt @map("updated_at")

  // Relações principais
  marketplace            Marketplaces @relation(fields: [marketplaceId], references: [id])
  logoFile               File?        @relation("LogoFile", fields: [logoFileId], references: [id])
  digitalCertificateFile File?        @relation("DigitalCertificateFile", fields: [digitalCertificateFileId], references: [id])
  country                Country      @relation(fields: [countryCode], references: [code])
  state                  State        @relation(fields: [stateCode], references: [code])
  city                   City         @relation(fields: [cityCode], references: [code])

  // Relações com Receivable (Recebíveis)
  receivablesAsOriginalOwner Receivable[] @relation("OriginalOwner")
  receivablesAsCurrentOwner  Receivable[] @relation("CurrentOwner")
  receivables                Receivable[]

  // Relações com ReceivableHistory (Histórico de Recebíveis)
  receivableHistoryAsFromOwner ReceivableHistory[] @relation("FromOwner")
  receivableHistoryAsToOwner   ReceivableHistory[] @relation("ToOwner")

  // Outras relações do negócio
  person               Person[]
  userBusiness         UserBusiness[]
  businessApps         BusinessApps[]
  businessOwners       BusinessOwners[]
  businessBankAccounts BusinessBankAccounts[]
  items                Item[]
  itemGroup            ItemGroup[]
  itemTaxation         ItemTaxation[]
  user                 User[]
  emailMessages        Email[]
  file                 File[]
  businessPlan         BusinessPlan[]
  account              Account[]
  subscription         Subscription[]
  event                Event[]
  deal                 Deal[]
  sale                 Sale[]
  priceList            PriceList[]
  invoice              Invoice[]
  serviceOrder         ServiceOrder[]
  ticket               Ticket[]
  featureSuggestion    FeatureSuggestion[]
  invoiceSplit         InvoiceSplit[]
  transactionSplit     TransactionSplit[]
  subscriptionSplit    SubscriptionSplit[]
  webhookEvent         WebhookEvent[]
  campaign             Campaign[]
  reservation          Reservation[]
  purchase             Purchase[]
  stockMovement        StockMovement[]
  inventory            Inventory[]
  cashFlow             CashFlow[]
  payment              Payment[]
  whatsApp             WhatsApp[]
  transaction          Transaction[]
  salesChannel         SalesChannel[]
  pipeline             Pipeline[]
  nfse                 Nfse[]
  digitalCertificate   DigitalCertificate[]
  anticipation         Anticipation[]

  @@map("business")
}

model File {
  id         String    @id @default(uuid())
  businessId String    @map("business_id")
  title      String
  url        String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])

  user                       User[]
  invoiceAttachment          InvoiceAttachment[]
  logoBusiness               Business?            @relation("LogoFile")
  digitalCertificateBusiness Business?            @relation("DigitalCertificateFile")
  eventRegistration          EventRegistration[]
  campaign                   Campaign[]
  transaction                Transaction[]
  nfsePdf                    Nfse[]               @relation("NfsePdfFile")
  nfseXml                    Nfse[]               @relation("NfseXmlFile")
  DigitalCertificate         DigitalCertificate[]

  @@map("files")
}

model BusinessOwners {
  id           String    @id @default(uuid())
  businessId   String    @map("business_id")
  name         String
  email        String
  phone        String
  document     String
  addressLine1 String    @map("address_line1")
  addressLine2 String    @map("address_line2")
  addressLine3 String?   @map("address_line3")
  neighborhood String
  postalCode   String    @map("postal_code")
  countryCode  String    @map("country_code")
  stateCode    String    @map("state_code")
  cityCode     String    @map("city_code")
  birthDate    DateTime  @default(now()) @map("birth_date")
  ownerType    String    @map("owner_type")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  status       String

  business Business @relation(fields: [businessId], references: [id])
  country  Country  @relation(fields: [countryCode], references: [code])
  state    State    @relation(fields: [stateCode], references: [code])
  city     City     @relation(fields: [cityCode], references: [code])

  @@map("business_owners")
}

model BusinessBankAccounts {
  id         String    @id @default(uuid())
  businessId String    @map("business_id")
  bankCode   String
  branch     String
  account    String
  status     String
  type       String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  Bank     Bank     @relation(fields: [bankCode], references: [id])

  @@map("business_bank_accounts")
}

model Bank {
  id   String @id @default(uuid())
  name String
  code String @unique

  businessBankAccounts BusinessBankAccounts[]

  @@map("banks")
}

model Plan {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Float
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  businessPlan BusinessPlan[]

  @@map("plans")
}

model BusinessPlan {
  id         String    @id @default(uuid())
  businessId String    @map("business_id")
  planId     String    @map("plan_id")
  price      Float
  status     String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  plan     Plan     @relation(fields: [planId], references: [id])

  @@unique([businessId, planId, status], name: "businessPlanIdentifier")
  @@map("business_plans")
}

model App {
  id          String    @id @default(uuid())
  name        String
  description String
  price       Float
  quantity    Float
  type        AppType
  status      String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  businessApps BusinessApps[]

  @@map("apps")
}

model BusinessApps {
  id         String    @id @default(uuid())
  businessId String    @map("business_id")
  appId      String    @map("app_id")
  price      Float
  quantity   Int
  status     String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  apps     App      @relation(fields: [appId], references: [id])

  @@map("business_apps")
}

model Marketplaces {
  id        String    @id @default(uuid())
  name      String    @unique
  document  String    @unique
  status    String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  business Business[]

  @@map("marketplaces")
}

model TwoFactorAuthentication {
  id        String    @id @default(uuid())
  userId    String
  type      String // Enum será mapeado como string
  code      String
  expiresAt DateTime
  attempts  Int       @default(0)
  verified  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  user User @relation(fields: [userId], references: [id])

  @@index([userId, type])
  @@map("two_factor_authentications")
}

model Person {
  id           String    @id @default(uuid())
  businessId   String    @map("business_id")
  name         String
  email        String
  phone        String
  document     String
  ie           String?
  addressLine1 String    @map("address_line1")
  addressLine2 String    @map("address_line2")
  addressLine3 String?   @map("address_line3")
  neighborhood String
  postalCode   String    @map("postal_code")
  countryCode  String    @map("country_code")
  stateCode    String    @map("state_code")
  cityCode     String    @map("city_code")
  notes        String?
  status       String
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  country  Country  @relation(fields: [countryCode], references: [code])
  state    State    @relation(fields: [stateCode], references: [code])
  city     City     @relation(fields: [cityCode], references: [code])

  deal                 Deal[]
  invoice              Invoice[]
  eventRegistration    EventRegistration[]
  campaignContribution CampaignContribution[]
  reservation          Reservation[]
  salesAsCustomer      Sale[]                 @relation("Customer")
  salesAsPerson        Sale[]                 @relation("SalesPerson")
  customerOrders       ServiceOrder[]         @relation("Customer")
  technicianOrders     ServiceOrder[]         @relation("Technician")
  purchase             Purchase[]
  cashFlow             CashFlow[]
  payment              Payment[]
  transaction          Transaction[]
  subscription         Subscription[]
  Nfse                 Nfse[]

  @@unique([businessId, document], name: "documentIdentifier")
  @@map("persons")
}

model Item {
  id          String    @id @default(uuid())
  businessId  String    @map("business_id")
  itemType    String    @map("item_type")
  idAux       String    @map("id_aux")
  description String
  price       Float
  unit        String
  status      String
  groupId     String?   @map("group_id")
  taxationId  String?   @map("taxation_id")
  ncm         String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  business     Business      @relation(fields: [businessId], references: [id])
  itemGroup    ItemGroup?    @relation(fields: [groupId], references: [id])
  itemTaxation ItemTaxation? @relation(fields: [taxationId], references: [id])

  invoiceItem      InvoiceItem[]
  subscriptionItem SubscriptionItem[]
  dealItem         DealItem[]
  saleItem         SaleItem[]
  purchaseItem     PurchaseItem[]
  stockMovements   StockMovement[]

  @@unique([businessId, idAux], name: "idAuxIdentifier")
  @@map("items")
}

model ItemGroup {
  id         String    @id @default(uuid())
  businessId String    @map("business_id")
  group      String
  status     String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])

  item Item[]

  @@map("item_group")
}

model ItemTaxation {
  id         String    @id @default(uuid())
  businessId String    @map("business_id")
  taxation   String
  status     String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])

  item Item[]

  @@map("item_taxation")
}

model PriceList {
  id         String     @id @default(uuid())
  businessId String
  priceList  String     @map("price_list")
  status     String
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime?  @updatedAt @map("updated_at")
  DealItem   DealItem[]

  business Business @relation(fields: [businessId], references: [id])

  @@map("price_list")
}

model Email {
  id         String    @id @default(uuid())
  businessId String?   @map("business_id")
  to         String
  subject    String
  body       String
  status     String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  business Business? @relation(fields: [businessId], references: [id])

  @@map("emails")
}

model WhatsApp {
  id         String    @id @default(uuid())
  businessId String    @map("business_id")
  to         String
  content    String
  status     String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])

  @@map("whatsapps")
}

model Invoice {
  id String @id @default(uuid())

  businessId       String          @map("business_id")
  personId         String          @map("person_id")
  description      String?
  notes            String?
  paymentLink      String          @map("payment_link")
  status           InvoiceStatus
  //datas
  issueDate        DateTime        @map("issue_date") //data de emissão 
  dueDate          DateTime        @map("due_date") //data de vencimento
  paymentDate      DateTime?       @map("payment_date") //data do pgto
  paymentLimitDate DateTime?       @map("payment_limit_date") //data limite de pgto
  //valor
  grossAmount      Float           @map("gross_amount")
  discountAmount   Float           @map("discount_amount") //valor do desconto
  amount           Float // valor total
  paymentAmount    Float           @map("payment_amount") //valor do pgto
  //protest/protesto
  protestMode      YesNo
  protestDays      Int             @map("protest_days") //dias para protesto
  //late/multa
  lateMode         CalculationMode
  lateValue        Float           @map("late_value") //valor da multa
  //interest/juros
  interestMode     CalculationMode
  interestDays     Int             @map("interest_days") //dias para juros
  interestValue    Float           @map("interest_value") //valor dos juros
  //discount/desconto
  discountMode     CalculationMode
  discountDays     Int             @map("discount_days") //dias para desconto
  discountValue    Float           @map("discount_value") //valor do desconto

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  person   Person   @relation(fields: [personId], references: [id])

  invoiceItem        InvoiceItem[]
  invoiceEvent       InvoiceEvent[]
  invoiceAttachment  InvoiceAttachment[]
  invoiceSplit       InvoiceSplit[]
  invoiceTransaction InvoiceTransaction[]
  invoicePayment     InvoicePayment[]

  @@unique([id, businessId])
  @@map("invoices")
}

model InvoiceItem {
  id              String @id @default(uuid())
  invoiceId       String @map("invoice_id")
  itemId          String @map("item_id")
  itemDescription String @map("item_description")
  quantity        Float
  unitPrice       Float  @map("unit_price")
  discount        Float
  totalPrice      Float  @map("total_price")

  invoice Invoice @relation(fields: [invoiceId], references: [id])
  item    Item    @relation(fields: [itemId], references: [id])

  @@map("invoice_items")
}

model InvoiceTransaction {
  id            String @id @default(uuid())
  invoiceId     String @map("invoice_id")
  transactionId String @map("transaction_id")

  invoice     Invoice     @relation(fields: [invoiceId], references: [id])
  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@map("invoice_transactions")
}

model InvoicePayment {
  id            String        @id @default(uuid())
  invoiceId     String
  dueDate       DateTime      @map("due_date")
  ammount       Float
  paymentMethod PaymentMethod @map("payment_method")

  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("invoice_payments")
}

model InvoiceSplit {
  id          String          @id @default(uuid())
  invoiceId   String          @map("invoice_id")
  recipientId String          @map("recipient_id")
  splitType   CalculationMode @map("split_type")
  amount      Float
  feeAmount   Float           @map("fee_amount")

  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  recipient Business @relation(fields: [recipientId], references: [id])

  @@map("invoice_splits")
}

model InvoiceEvent {
  id        String   @id @default(uuid())
  invoiceId String   @map("invoice_id")
  event     String
  createdAt DateTime @default(now()) @map("created_at")

  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("invoice_events")
}

model InvoiceAttachment {
  id        String   @id @default(uuid())
  invoiceId String   @map("invoice_id")
  fileId    String   @map("file_id")
  createdAt DateTime @default(now()) @map("created_at")

  file    File    @relation(fields: [fileId], references: [id])
  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("invoice_attachments")
}

model Transaction {
  id               String          @id @default(uuid())
  businessId       String          @map("business_id")
  personId         String?         @map("person_id")
  description      String?
  status           String
  type             TransactionType
  //datas
  dueDate          DateTime?       @map("due_date")
  paymentDate      DateTime?       @map("paymend_date")
  paymentLimitDate DateTime?       @map("payment_limit_date")
  //valores
  amount           Float
  feeAmount        Float           @map("fee_amount")
  paymentAmount    Float?          @map("payment_amount")
  //boleto
  ourNumber        String?         @map("our_number")
  digitableLine    String?         @map("digitable_line")
  barcode          String?
  //pix
  pixQrCode        String?         @map("pix_qr_code")
  pixId            String?         @map("pix_id")
  fileId           String?         @map("file_id")
  //outros
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime?       @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  person   Person?  @relation(fields: [personId], references: [id])
  file     File?    @relation(fields: [fileId], references: [id])

  invoiceTransaction InvoiceTransaction[]
  transactionSplit   TransactionSplit[]
  receivable         Receivable[]

  @@map("transactions")
}

model TransactionSplit {
  id            String    @id @default(uuid())
  transactionId String    @map("transaction_id")
  recipientId   String    @map("recipient_id")
  splitType     SplitType @map("split_type")
  amount        Float

  transaction Transaction @relation(fields: [transactionId], references: [id])
  recipient   Business    @relation(fields: [recipientId], references: [id])

  @@map("transaction_splits")
}

// Modelo Receivable - Representa os recebíveis no sistema
model Receivable {
  id              String           @id @default(uuid())
  transactionId   String           @map("transaction_id")
  originalOwnerId String           @map("original_owner_id")
  currentOwnerId  String           @map("current_owner_id")
  amount          Float
  netAmount       Float            @map("net_amount")
  originalDueDate DateTime         @map("original_due_date")
  currentDueDate  DateTime         @map("current_due_date")
  status          ReceivableStatus
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  businessId      String?

  // Relações
  transaction   Transaction              @relation(fields: [transactionId], references: [id])
  originalOwner Business                 @relation("OriginalOwner", fields: [originalOwnerId], references: [id])
  currentOwner  Business                 @relation("CurrentOwner", fields: [currentOwnerId], references: [id])
  Business      Business?                @relation(fields: [businessId], references: [id])
  history       ReceivableHistory[]
  anticipations AnticipationReceivable[]

  @@map("receivables")
}

model ReceivableHistory {
  id            String   @id @default(uuid())
  receivableId  String   @map("receivable_id")
  fromOwnerId   String   @map("from_owner_id")
  toOwnerId     String   @map("to_owner_id")
  operationType String   @map("operation_type")
  amount        Float
  feeAmount     Float?   @map("fee_amount")
  createdAt     DateTime @default(now())

  receivable Receivable @relation(fields: [receivableId], references: [id])
  fromOwner  Business   @relation("FromOwner", fields: [fromOwnerId], references: [id])
  toOwner    Business   @relation("ToOwner", fields: [toOwnerId], references: [id])

  @@map("receivable_history")
}

model Anticipation {
  id                String             @id @default(uuid())
  businessId        String             @map("business_id")
  requestedAmount   Float              @map("requested_amount")
  anticipatedAmount Float              @map("anticipated_amount")
  feeAmount         Float              @map("fee_amount")
  feePercentage     Float              @map("fee_percentage")
  status            AnticipationStatus

  // Estatísticos/análise
  averageDaysAhead Float            @map("average_days_ahead")
  oldestDueDate    DateTime         @map("oldest_due_date")
  newestDueDate    DateTime         @map("newest_due_date")
  receivablesCount Int              @map("receivables_count")
  riskScore        Float?           @map("risk_score")
  operationType    AnticipationType @map("operation_type")

  // Campos de datas
  requestDate       DateTime  @map("request_date")
  analysisStartDate DateTime? @map("analysis_start_date")
  analysisEndDate   DateTime? @map("analysis_end_date")
  approvalDate      DateTime? @map("approval_date")
  completionDate    DateTime? @map("completion_date")
  canceledDate      DateTime? @map("canceled_date")

  // Campos de análise/aprovação
  analyzerNotes   String? @map("analyzer_notes")
  rejectionReason String? @map("rejection_reason")
  approvedById    String? @map("approved_by_id")
  analyzedById    String? @map("analyzed_by_id")

  // Campos financeiros adicionais
  minimumPaymentDate DateTime @map("minimum_payment_date")
  maximumPaymentDate DateTime @map("maximum_payment_date")
  effectiveRate      Float    @map("effective_rate")
  annualRate         Float    @map("annual_rate")

  // Relacionamentos
  business Business @relation(fields: [businessId], references: [id])

  AnticipationReceivable AnticipationReceivable[]

  @@map("anticipations")
}

model AnticipationReceivable {
  id             String @id @default(uuid())
  anticipationId String @map("anticipation_id")
  receivableId   String @map("receivable_id")

  // Valores
  requestedAmount Float  @map("requested_amount")
  approvedAmount  Float? @map("approved_amount")
  feeAmount       Float  @map("fee_amount")
  effectiveRate   Float  @map("effective_rate")

  // Status e Análise
  status          AnticipationReceivableStatus
  riskScore       Float?                       @map("risk_score")
  rejectionReason String?                      @map("rejection_reason")
  analyzerNotes   String?                      @map("analyzer_notes")

  // Datas
  createdAt  DateTime  @default(now())
  analyzedAt DateTime? @map("analyzed_at")
  approvedAt DateTime? @map("approved_at")

  // Responsáveis
  analyzedById String? @map("analyzed_by_id")
  approvedById String? @map("approved_by_id")
  userId       String? @map("user_id")

  // Relacionamentos
  anticipation Anticipation @relation(fields: [anticipationId], references: [id])
  receivable   Receivable   @relation(fields: [receivableId], references: [id])
  User         User?        @relation(fields: [userId], references: [id])

  @@map("anticipation_receivables")
}

model Payment {
  id                     String      @id @default(uuid())
  businessId             String      @map("business_id")
  personId               String?     @map("person_id")
  paymentId              String?     @map("payment_id")
  paymentType            PaymentType @map("payment_type")
  description            String?
  status                 String
  amount                 Float
  feeAmount              Float       @map("fee_amount")
  paymentDate            DateTime    @map("paymend_date")
  pixMessage             String?     @map("pix_message")
  pixKey                 String?     @map("pix_key")
  beneficiaryIspb        String?
  beneficiaryBranch      String?
  beneficiaryAccount     String?
  beneficiaryAccountType String?
  beneficiaryName        String?
  beneficiaryDocument    String?
  createdAt              DateTime    @default(now()) @map("created_at")
  updatedAt              DateTime?   @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  person   Person?  @relation(fields: [personId], references: [id])

  @@index([paymentId])
  @@index([status])
  @@index([paymentType])
  @@map("payments")
}

model Account {
  id         String    @id @default(uuid())
  businessId String    @map("business_id")
  number     String
  status     String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])

  accountMovement        AccountMovement[]
  transferFromAccount    Transfer[]               @relation("TransferFromAccount")
  transferToAccount      Transfer[]               @relation("TransferToAccount")
  AccountBalanceSnapshot AccountBalanceSnapshot[]

  @@map("accounts")
}

model AccountMovement {
  id          String       @id @default(uuid())
  accountId   String       @map("account_id")
  type        MovementType
  amount      Float
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?    @updatedAt @map("updated_at")

  account Account @relation(fields: [accountId], references: [id])

  transferFrom Transfer? @relation("TransferFromAccountMovement")
  transferTo   Transfer? @relation("TransferToAccountMovement")

  @@map("account_movement")
}

model AccountBalanceSnapshot {
  id                       String    @id @default(uuid())
  accountId                String
  balance                  Decimal
  month                    Int
  year                     Int
  snapshotTimestamp        DateTime
  lastTransactionId        String
  lastTransactionTimestamp DateTime
  createdAt                DateTime  @default(now())
  updatedAt                DateTime?

  account Account @relation(fields: [accountId], references: [id])

  @@index([accountId, month, year])
  @@index([accountId, snapshotTimestamp])
  @@map("account_balance_snapshots")
}

model Transfer {
  id String @id @default(uuid())

  fromAccountId String @map("from_account_id")
  toAccountId   String @map("to_account_id")

  fromAccountMovementId String @unique @map("from_account_movement_id")
  toAccountMovementId   String @unique @map("to_account_movement_id")

  amount    Float
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  fromAccount Account @relation("TransferFromAccount", fields: [fromAccountId], references: [id])
  toAccount   Account @relation("TransferToAccount", fields: [toAccountId], references: [id])

  fromAccountMovement AccountMovement @relation("TransferFromAccountMovement", fields: [fromAccountMovementId], references: [id])
  toAccountMovement   AccountMovement @relation("TransferToAccountMovement", fields: [toAccountMovementId], references: [id])

  @@unique([fromAccountMovementId, toAccountMovementId])
  @@map("transfers")
}

model CashFlow {
  id              String   @id @default(uuid())
  businessId      String   @map("business_id")
  personId        String?  @map("person_id")
  description     String
  date            DateTime
  amount          Float
  type            String //IN, OUT
  status          String
  chartOfAccounts String?  @map("chart_of_accounts")
  costCenter      String?
  document        String?
  notes           String?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  person   Person?  @relation(fields: [personId], references: [id])

  @@map("cash_flows")
}

model Subscription {
  id            String             @id @default(uuid())
  businessId    String             @map("business_id")
  personId      String             @map("person_id")
  price         Float
  notes         String?
  paymentMethod String             @map("payment_method")
  interval      String
  status        SubscriptionStatus

  nextBillingDate    DateTime  @map("next_billing_date")
  nextAdjustmentDate DateTime? @map("next_adjustment_date")

  cancellationReason        String?   @map("cancellation_reason")
  cancellationDate          DateTime? @map("cancellation_date")
  cancellationScheduledDate DateTime? @map("cancellation_scheduled_date")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  person   Person   @relation(fields: [personId], references: [id])

  subscriptionItem  SubscriptionItem[]
  subscriptionNFSe  SubscriptionNFSe[]
  subscriptionSplit SubscriptionSplit[]

  @@map("subscriptions")
}

model SubscriptionItem {
  id              String    @id @default(uuid())
  subscriptionId  String    @map("subscription_id")
  itemId          String    @map("item_id")
  itemDescription String    @map("item_description")
  quantity        Float
  unitPrice       Float     @map("unit_price")
  totalPrice      Float     @map("total_price")
  status          String
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")

  subscription Subscription @relation(fields: [subscriptionId], references: [id])
  item         Item         @relation(fields: [itemId], references: [id])

  @@map("subscription_items")
}

model SubscriptionSplit {
  id             String    @id @default(uuid())
  subscriptionId String    @map("subscription_id")
  recipientId    String    @map("recipient_id")
  splitType      SplitType @map("split_type")
  amount         Float
  feeAmount      Float     @map("fee_amount")

  subscription Subscription @relation(fields: [subscriptionId], references: [id])
  recipient    Business     @relation(fields: [recipientId], references: [id])

  @@map("subscription_splits")
}

model SubscriptionNFSe {
  id             String @id @default(uuid())
  subscriptionId String @map("subscription_id")

  serviceCode   String  @map("service_code")
  issRetention  Boolean @map("retention_iss")
  inssRetention Boolean @map("retention_inss")
  inssRate      Float?  @map("inss_rate")

  incidendeState String @map("incidende_state")
  indicendeCity  String @map("incidende_city")

  retentionState String @map("retention_state")
  retentionCity  String @map("retention_city")

  status String

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  subscription Subscription @relation(fields: [subscriptionId], references: [id])

  @@map("subscription_nfse")
}

model WebhookEvent {
  id          String    @id @default(uuid())
  businessId  String?   @map("business_id")
  eventType   String?   @map("event_type")
  payload     Json
  status      String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  processedAt DateTime? @map("processed_at")

  business Business? @relation(fields: [businessId], references: [id])

  @@map("webhook_events")
}

model Sale {
  id               String    @id @default(uuid())
  businessId       String    @map("business_id")
  customerId       String?   @map("customer_id")
  ownerId          String    @map("owner_id")
  salesPersonId    String    @map("sales_person_id")
  channelId        String?   @map("channel_id")
  issueDate        DateTime  @map("issue_date") //data de emissão 
  status           String
  notes            String?
  servicesAmount   Float     @default(0.0) @map("services_amount") // valor total dos serviços
  productAmount    Float     @default(0.0) @map("product_amount") // valor total dos produtos
  grossAmount      Float     @default(0.0) @map("gross_amount") //valor bruto
  discountAmount   Float     @default(0.0) @map("discount_amount") //valor do desconto
  amount           Float     @default(0.0) // valor total
  commissionAmount Float     @default(0.0) @map("commission_amount") //valor da comissão
  shippingAmount   Float     @default(0.0) @map("shipping_amount") //valor do frete
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime? @updatedAt @map("updated_at")

  business     Business      @relation(fields: [businessId], references: [id])
  owner        User          @relation(fields: [ownerId], references: [id])
  salesChannel SalesChannel? @relation(fields: [channelId], references: [id])
  salesPerson  Person        @relation("SalesPerson", fields: [salesPersonId], references: [id])
  customer     Person?       @relation("Customer", fields: [customerId], references: [id])

  saleItem   SaleItem[]
  saleReturn SaleReturn[]

  @@map("sales")
}

model SaleItem {
  id               String @id @default(uuid())
  saleId           String @map("sale_id")
  itemId           String @map("item_id")
  itemDescription  String @map("item_description")
  quantity         Float
  unitPrice        Float  @map("unit_price") //valor unitário
  discountAmount   Float  @map("discount_amount") //valor do desconto
  commissionAmount Float  @map("commission_amount") //valor da comissão
  totalPrice       Float  @map("total_price")

  item           Item             @relation(fields: [itemId], references: [id])
  sale           Sale             @relation(fields: [saleId], references: [id])
  saleReturnItem SaleReturnItem[]

  @@map("sale_items")
}

model SalesChannel {
  id         String    @id @default(uuid())
  businessId String    @map("business_id")
  name       String
  status     String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  sale     Sale[]

  @@map("sales_channels")
}

model SaleReturn {
  id         String    @id @default(uuid())
  saleId     String    @map("sale_id")
  returnDate DateTime  @map("return_date")
  reason     String
  notes      String?
  status     String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  sale Sale @relation(fields: [saleId], references: [id])

  returnItem SaleReturnItem[]

  @@map("sale_returns")
}

model SaleReturnItem {
  id         String    @id @default(uuid())
  returnId   String    @map("return_id")
  saleItemId String    @map("sale_item_id")
  quantity   Float
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  saleReturn     SaleReturn    @relation(fields: [returnId], references: [id])
  saleItem       SaleItem      @relation(fields: [saleItemId], references: [id])
  purchaseItem   PurchaseItem? @relation(fields: [purchaseItemId], references: [id])
  purchaseItemId String?

  @@map("sale_return_items")
}

model Purchase {
  id               String    @id @default(uuid())
  businessId       String
  supplierId       String
  documentDate     DateTime  @map("document_date") // data do documento
  documentNumber   String    @map("document_number") // número do documento
  accessKey        String    @map("access_key") //
  servicesAmount   Float     @default(0.0) @map("services_amount") // valor total dos serviços
  productAmount    Float     @default(0.0) @map("product_amount") // valor total dos produtos
  grossAmount      Float     @default(0.0) @map("gross_amount") //valor bruto
  discountAmount   Float     @default(0.0) @map("discount_amount") //valor do desconto
  commissionAmount Float     @default(0.0) @map("commission_amount") //valor da comissão
  shippingAmount   Float     @default(0.0) @map("shipping_amount") //valor do frete
  amount           Float     @default(0.0) // valor total
  status           String
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  supplier Person   @relation(fields: [supplierId], references: [id])

  purchaseItem    PurchaseItem[]
  purchasePayment PurchasePayment[]

  @@map("purchases")
}

model PurchaseItem {
  id              String    @id @default(uuid())
  purchaseId      String    @map("purchase_id")
  itemId          String    @map("item_id")
  itemDescription String    @map("item_description")
  quantity        Float
  unitPrice       Float     @map("unit_price") //valor unitário
  totalPrice      Float     @map("total_price")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")

  item     Item     @relation(fields: [itemId], references: [id])
  purchase Purchase @relation(fields: [purchaseId], references: [id])

  saleReturnItem SaleReturnItem[]

  @@map("purchase_items")
}

model PurchasePayment {
  id            String    @id @default(uuid())
  purchaseId    String    @map("purchase_id")
  paymentDate   DateTime  @map("payment_date") // data do pagamento
  amount        Float     @map("amount") // valor do pagamento
  paymentMethod String    @map("payment_method") // método de pagamento
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  purchase Purchase @relation(fields: [purchaseId], references: [id])

  @@map("purchase_payments")
}

model StockMovement {
  id          String    @id @default(uuid())
  businessId  String    @map("business_id")
  userId      String    @map("user_id")
  itemId      String    @map("item_id")
  description String
  quantity    Float
  type        String //IN, OUT, INVENTORY
  sourceType  String?   @map("source_type") //SALE, PURCHASE, TRANSFER, etc
  sourceId    String?   @map("source_id") // ID da origem (compra ou venda)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  item     Item     @relation(fields: [itemId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@map("stock_movements")
}

model Inventory {
  id          String    @id @default(uuid())
  businessId  String    @map("business_id")
  description String
  status      String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  business      Business        @relation(fields: [businessId], references: [id])
  inventoryItem InventoryItem[]

  @@map("inventories")
}

model InventoryItem {
  id              String    @id @default(uuid())
  inventoryId     String    @map("inventory_id")
  itemId          String    @map("item_id")
  quantity        Float
  unitCost        Float     @map("unit_cost")
  totalCost       Float     @map("total_cost")
  countedQuantity Float     @map("counted_quantity")
  systemQuantity  Float     @map("system_quantity")
  difference      Float     @map("difference")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")

  inventory Inventory @relation(fields: [inventoryId], references: [id])

  @@map("inventory_items")
}

model Deal {
  id                String    @id @default(uuid())
  businessId        String    @map("business_id")
  customerId        String?   @map("customer_id")
  ownerId           String    @map("owner_id")
  pipelineId        String    @map("pipeline_id")
  stageId           String    @map("stage_id")
  lostReasonId      String?   @map("lost_reason_id")
  title             String
  probability       Float?
  expectedCloseDate DateTime? @map("expected_close_date") //data de fechamento esperada
  notes             String?

  //valor
  grossAmount      Float  @default(0.0) @map("gross_amount")
  discountAmount   Float? @default(0.0) @map("discount_amount")
  amount           Float  @default(0.0)
  commissionAmount Float? @default(0.0) @map("commission_amount")
  shippingAmount   Float  @default(0.0) @map("shipping_amount")

  //datas
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  closedAt  DateTime? @map("closed_at") //data de fechamento

  lostReason LostReason? @relation(fields: [lostReasonId], references: [id])
  stage      Stage       @relation(fields: [stageId], references: [id])
  owner      User        @relation(fields: [ownerId], references: [id])
  business   Business    @relation(fields: [businessId], references: [id])
  person     Person?     @relation(fields: [customerId], references: [id])
  pipeline   Pipeline    @relation(fields: [pipelineId], references: [id])

  activity Activity[]
  dealItem DealItem[]

  @@map("crm_deals")
}

model DealItem {
  id               String  @id @default(uuid())
  dealId           String  @map("deal_id")
  itemId           String  @map("item_id")
  itemDescription  String  @map("item_description")
  priceListId      String? @map("price_list_id")
  quantity         Float
  unitPrice        Float   @map("unit_price")
  discountAmount   Float?  @map("discount_amount")
  commissionAmount Float?  @map("commission_amount")
  totalPrice       Float   @map("total_price")

  deal      Deal       @relation(fields: [dealId], references: [id])
  item      Item       @relation(fields: [itemId], references: [id])
  priceList PriceList? @relation(fields: [priceListId], references: [id])

  @@map("crm_deal_items")
}

model Pipeline {
  id         String @id @default(uuid())
  businessId String @map("business_id")
  name       String

  business Business @relation(fields: [businessId], references: [id])

  stage Stage[]
  deal  Deal[]

  @@map("crm_pipelines")
}

model Stage {
  id         String    @id @default(uuid())
  name       String
  pipelineId String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  pipeline Pipeline @relation(fields: [pipelineId], references: [id])
  deal     Deal[]

  @@map("crm_stages")
}

model LostReason {
  id   String @id @default(uuid())
  name String
  Deal Deal[]

  @@map("crm_lost_reasons")
}

model Activity {
  id      String   @id @default(uuid())
  dealId  String   @map("deal_id")
  title   String
  notes   String
  type    String
  status  String
  dueDate DateTime @map("due_date")
  dueTime String?  @map("due_time")

  deal Deal @relation(fields: [dealId], references: [id])

  @@map("crm_activities")
}

model ServiceOrder {
  id               String  @id @default(uuid())
  businessId       String  @map("business_id")
  customerId       String  @map("customer_id")
  ownerId          String  @map("owner_id")
  technicianId     String  @map("technician_id")
  requestedService String  @map("requested_service")
  performedService String? @map("performed_service")
  status           String
  notes            String?

  scheduledAt DateTime? @map("scheduled_at")
  startedAt   DateTime? @map("started_at")
  finishedAt  DateTime? @map("finished_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  business   Business @relation(fields: [businessId], references: [id])
  owner      User     @relation(fields: [ownerId], references: [id])
  customer   Person   @relation("Customer", fields: [customerId], references: [id])
  technician Person   @relation("Technician", fields: [technicianId], references: [id])

  @@map("service_orders")
}

model Event {
  id          String    @id @default(uuid())
  businessId  String    @map("business_id")
  title       String
  description String
  status      String
  startAt     DateTime  @map("start_at")
  endAt       DateTime  @map("end_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  business          Business            @relation(fields: [businessId], references: [id])
  eventTier         EventTier[]
  eventRegistration EventRegistration[]

  @@map("events")
}

model EventTier {
  id        String    @id @default(uuid())
  eventId   String    @map("event_id")
  price     Float
  quantity  Int
  startAt   DateTime  @map("start_at")
  endAt     DateTime  @map("end_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  event             Event               @relation(fields: [eventId], references: [id])
  eventRegistration EventRegistration[]

  @@map("event_tiers")
}

model EventRegistration {
  id          String    @id @default(uuid())
  eventId     String    @map("event_id")
  eventTierId String    @map("event_tier_id")
  ownerId     String    @map("owner_id")
  personId    String    @map("person_id")
  imageFileId String    @map("image_file_id")
  amount      Float
  status      String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  event     Event     @relation(fields: [eventId], references: [id])
  eventTier EventTier @relation(fields: [eventTierId], references: [id])
  person    Person    @relation(fields: [personId], references: [id])
  owner     User      @relation(fields: [ownerId], references: [id])
  imageFile File?     @relation(fields: [imageFileId], references: [id])

  @@map("event_registrations")
}

model Campaign {
  id           String    @id @default(uuid())
  businessId   String    @map("business_id")
  title        String
  description  String
  categoryId   String    @map("category_id")
  goalAmount   Float     @map("goal_amount")
  raisedAmount Float     @map("raised_amount")
  imageFileId  String    @map("image_file_id")
  status       String
  startAt      DateTime  @map("start_at")
  endAt        DateTime? @map("end_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  business             Business               @relation(fields: [businessId], references: [id])
  category             CampaignCategory       @relation(fields: [categoryId], references: [id])
  imageFile            File?                  @relation(fields: [imageFileId], references: [id])
  campaignContribution CampaignContribution[]

  @@map("campaigns")
}

model CampaignCategory {
  id       String     @id @default(uuid())
  name     String
  Campaign Campaign[]

  @@map("campaign_categories")
}

model CampaignContribution {
  id         String    @id @default(uuid())
  campaignId String    @map("campaign_id")
  ownerId    String    @map("owner_id")
  personId   String    @map("person_id")
  amount     Float
  status     String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  campaign Campaign @relation(fields: [campaignId], references: [id])
  owner    User     @relation(fields: [ownerId], references: [id])
  person   Person   @relation(fields: [personId], references: [id])

  @@map("campaign_contributions")
}

model Reservation {
  id          String    @id @default(uuid())
  businessId  String    @map("business_id")
  personId    String    @map("person_id")
  title       String
  description String
  amount      Float
  status      String
  startAt     DateTime  @map("start_at")
  endAt       DateTime  @map("end_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  person   Person   @relation(fields: [personId], references: [id])

  reservationResource ReservationResource[]

  @@map("reservations")
}

model Resource {
  id        String    @id @default(uuid())
  name      String
  amount    Float
  status    String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  reservationResource ReservationResource[]

  @@map("resources")
}

model ReservationResource {
  id            String    @id @default(uuid())
  reservationId String    @map("reservation_id")
  resourceId    String    @map("resource_id")
  amount        Float
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  reservation Reservation @relation(fields: [reservationId], references: [id])
  resource    Resource    @relation(fields: [resourceId], references: [id])

  @@map("reservation_resources")
}

model Nfse {
  id                    String   @id @default(uuid())
  businessId            String   @map("business_id")
  personId              String   @map("person_id")
  rpsNumber             String   @map("rps_number")
  rpsSeries             String   @map("rps_series")
  rpsType               RpsType  @map("rps_type")
  issueDate             DateTime @map("issue_date")
  competenceDate        DateTime @map("competence_date")
  description           String   @map("description")
  additionalInformation String   @map("additional_information")

  operationType  OperationType  @map("operation_type") //natureza da operacao
  serviceCode    ServiceCode    @map("service_code") // codigo do servico
  issRequirement IssRequirement @map("iss_requirement") // exigibilidade do iss
  cnaeCode       String         @map("cnae_code") //cnae code //mudar para enum
  cityTaxCode    String?        @map("city_tax_code") //codigo de tributacao do municipio
  issRetention   Boolean        @map("retention_iss")

  // Values
  serviceAmount         Decimal @map("service_amount") @db.Decimal(10, 2)
  unconditionalDiscount Decimal @default(0) @map("unconditional_discount") @db.Decimal(10, 2)
  conditionalDiscount   Decimal @default(0) @map("conditional_discount") @db.Decimal(10, 2)
  calculationBase       Decimal @map("calculation_base") @db.Decimal(10, 2)
  netAmount             Decimal @map("net_amount") @db.Decimal(10, 2) // Valor líquido

  // explicação dos valores
  // Valor do Serviço: R$ 1000,00
  // Desconto Incondicional: R$ 100,00
  // Base de Cálculo: R$ 900,00 (usado para calcular impostos)
  // ISS (5%): R$ 45,00
  // PIS (0,65%): R$ 5,85
  // COFINS (3%): R$ 27,00
  // Valor Líquido: R$ 822,15 (valor final após todas as retenções)

  // aliquotas
  issRate    Decimal @default(0) @map("iss_rate") @db.Decimal(5, 2)
  pisRate    Decimal @default(0) @map("pis_rate") @db.Decimal(5, 2)
  cofinsRate Decimal @default(0) @map("cofins_rate") @db.Decimal(5, 2)
  irRate     Decimal @default(0) @map("ir_rate") @db.Decimal(5, 2)
  inssRate   Decimal @default(0) @map("inss_rate") @db.Decimal(5, 2)
  csllRate   Decimal @default(0) @map("csll_rate") @db.Decimal(5, 2)

  // valores
  issAmount       Decimal @default(0) @map("iss_amount") @db.Decimal(10, 2)
  pisAmount       Decimal @default(0) @map("pis_amount") @db.Decimal(10, 2)
  cofinsAmount    Decimal @default(0) @map("cofins_amount") @db.Decimal(10, 2)
  inssAmount      Decimal @default(0) @map("inss_amount") @db.Decimal(10, 2)
  irAmount        Decimal @default(0) @map("ir_amount") @db.Decimal(10, 2)
  csllAmount      Decimal @default(0) @map("csll_amount") @db.Decimal(10, 2)
  otherRetentions Decimal @default(0) @map("other_retentions") @db.Decimal(10, 2)

  // Location (from existing model)
  incidenceState String @map("incidende_state")
  incidenceCity  String @map("incidende_city")

  serviceState String @map("service_state")
  serviceCity  String @map("service_city")

  // Control
  status      NfseStatus
  batchNumber String?    @map("batch_number")
  protocol    String?
  nfseNumber  String?    @map("nfse_number")

  substituteNfseNumber String?               @map("substitute_nfse_number")
  substituteReason     NfseSubstituteReason? @map("substitute_reason")
  cancelReason         NfseCancelReason?     @map("cancel_reason")

  pdfFileId String? @map("pdf_file_id")
  xmlFileId String? @map("xml_file_id")

  // Timestamps
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  canceledAt DateTime? @map("canceled_at")

  business Business @relation(fields: [businessId], references: [id])
  person   Person   @relation(fields: [personId], references: [id])

  incidenceCityCode  City  @relation("IncidenceCity", fields: [incidenceCity], references: [code])
  incidenceStateCode State @relation("IncidenceState", fields: [incidenceState], references: [code])

  serviceCityCode  City  @relation("ServiceCity", fields: [serviceCity], references: [code])
  serviceStateCode State @relation("ServiceState", fields: [serviceState], references: [code])

  pdfFile   File?       @relation("NfsePdfFile", fields: [pdfFileId], references: [id])
  xmlFile   File?       @relation("NfseXmlFile", fields: [xmlFileId], references: [id])
  nfseEvent NfseEvent[]

  // Índices
  @@index([businessId])
  @@index([personId])
  @@index([rpsNumber])
  @@index([nfseNumber])
  @@index([status])
  @@index([issueDate])
  @@map("nfses")
}

model NfseEvent {
  id      String          @id @default(uuid())
  nfseId  String          @map("nfse_id")
  type    NfseEventType   @map("type")
  status  NfseEventStatus @map("status")
  message String?         @map("message")

  // XML tracking
  requestXml    String? @map("request_xml") @db.Text
  responseXml   String? @map("response_xml") @db.Text
  returnMessage String? @map("return_message")

  // Additional data
  payload Json? @map("payload")

  // Timestamps
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  // Relation
  nfse Nfse @relation(fields: [nfseId], references: [id])

  // Indices
  @@index([nfseId])
  @@index([type])
  @@index([createdAt])
  @@map("nfse_events")
}

model NfseCityConfiguration {
  id   String @id @default(uuid())
  name String

  // Identificação da cidade
  cityCode  String @unique @map("city_code")
  stateCode String @map("state_code")

  // Configurações do provedor
  provider      String        @map("provider")
  abrasfVersion AbrasfVersion @map("abrasf_version")

  // URLs dos ambientes
  productionUrl String  @map("production_url")
  sandboxUrl    String? @map("sandbox_url")

  // Controle
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  // Relacionamentos
  city  City  @relation(fields: [cityCode], references: [code])
  state State @relation(fields: [stateCode], references: [code])

  @@map("nfse_city_configurations")
}

model DigitalCertificate {
  id                String            @id @default(uuid())
  businessId        String            @map("business_id")
  certificateFileId String            @map("certificate_file_id")
  source            CertificateSource

  // Certificate Info
  serialNumber String @map("serial_number")
  thumbprint   String
  password     String // será armazenado encriptado

  // Dates
  issueDate        DateTime  @map("issue_date")
  expirationDate   DateTime  @map("expiration_date")
  installationDate DateTime? @map("installation_date")

  // Status
  status CertificateStatus

  // Audit
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  // Relations
  business        Business @relation(fields: [businessId], references: [id])
  certificateFile File     @relation(fields: [certificateFileId], references: [id])

  // Indices
  @@index([businessId])
  @@index([serialNumber])
  @@index([status])
  @@index([expirationDate])
  @@map("digital_certificates")
}
